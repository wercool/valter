   1              	# 1 "Cstartup.S"
   2              	# 1 "<built-in>"
   1              	/*------------------------------------------------------------------------------
   0              	
   0              	
   2              	//*-         ATMEL Microcontroller Software Support  -  ROUSSET  -
   3              	//*------------------------------------------------------------------------------
   4              	//* The software is delivered "AS IS" without warranty or condition of any
   5              	//* kind, either express, implied or statutory. This includes without
   6              	//* limitation any warranty or condition with respect to merchantability or
   7              	//* fitness for any particular purpose, or against the infringements of
   8              	//* intellectual property rights of others.
   9              	//*-----------------------------------------------------------------------------
  10              	//*- File source          : Cstartup.s
  11              	//*- Object               : Generic CStartup for KEIL and GCC No Use REMAP
  12              	//*- Compilation flag     : None
  13              	//*-
  14              	//*- 1.0 18/Oct/04 JPP    : Creation
  15              	//*- 1.1 21/Feb/05 JPP    : Set Interrupt
  16              	//*- 1.1 01/Apr/05 JPP    : save SPSR 
  17              	//*-----------------------------------------------------------------------------*/
  18              	
  19              	     .equ   IRQ_Stack_Size,     0x00000060
  20              	
  21              	/* #include "AT91SAM7S64_inc.h"	  */
  22              	
  23              		.equ AIC_IVR,         (256) 
  24              		.equ AIC_FVR,         (260) 
  25              		.equ AIC_EOICR,       (304)
  26              		.equ AT91C_BASE_AIC,  (0xFFFFF000)
  27              	
  28              	#;------------------------------------------------------------------------------
  29              	#;- Section Definition
  30              	#;-----------------
  31              	#;-  Section    
  32              	#;- .internal_ram_top 	Top_Stack: used by the cstartup for vector initalisation 
  33              	#;-			management defined by ld and affect from ldscript 
  34              	#;------------------------------------------------------------------------------
  35              		.section 	.internal_ram_top
  36              		.code 32
  37              		.align 	0
  38              		.global	Top_Stack
  39              	Top_Stack:
  40              		
  41              	/*------------------------------------------------------------------------------
  42              	*- Area Definition
  43              	*------------------------------------------------------------------------------
  44              	* .text is used instead of .section .text so it works with arm-aout too.  */
  45              	        .section 	.reset
  46              	        .text
  47              	        .global _startup
  48              	        .func   _startup
  49              	_startup:
  50              	reset: 
  51              	/*------------------------------------------------------------------------------
  52              	//*- Exception vectors 
  53              	//*--------------------
  54              	//*- These vectors can be read at address 0 or at RAM address
  55              	//*- They ABSOLUTELY requires to be in relative addresssing mode in order to
  56              	//*- guarantee a valid jump. For the moment, all are just looping.
  57              	//*- If an exception occurs before remap, this would result in an infinite loop.
  58              	//*- To ensure if a exeption occurs before start application to infinite loop.
  59              	//*------------------------------------------------------------------------------*/
  60              	
  61 0000 100000EA 	                B           InitReset           /* 0x00 Reset handler */
  62              	undefvec:
  63 0004 FFFFFFEA 	                B           undefvec            /* 0x04 Undefined Instruction */
  64              	swivec:
  65 0008 000000EA 	                B           swivec              /* 0x08 Software Interrupt */
  66              	pabtvec:
  67 000c 010000EA 	                B           pabtvec             /* 0x0C Prefetch Abort */
  68              	dabtvec:
  69 0010 020000EA 	                B           dabtvec             /* 0x10 Data Abort */
  70              	rsvdvec:
  71 0014 030000EA 	                B           rsvdvec             /* 0x14 reserved  */
  72              	irqvec:
  73 0018 FEFFFFEA 	                B           IRQ_Handler_Entry   /* 0x18 IRQ	 */
  74              	fiqvec:               			            	/* 0x1c FIQ	*/
  75              	/*------------------------------------------------------------------------------
  76              	//*- Function             : FIQ_Handler_Entry
  77              	//*- Treatments           : FIQ Controller Interrupt Handler.
  78              	//*- Called Functions     : AIC_FVR[interrupt] 
  79              	//*------------------------------------------------------------------------------*/
  80              	
  81              	FIQ_Handler_Entry:
  82              	
  83              	/*- Switch in SVC/User Mode to allow User Stack access for C code 	*/
  84              	/* because the FIQ is not yet acknowledged*/
  85              	
  86              	/*- Save and r0 in FIQ_Register */
  87 001c 0090A0E1 	            mov         r9,r0
  88 0020 040198E5 		        ldr         r0 , [r8, #AIC_FVR]
  89 0024 D3F021E3 	            msr         CPSR_c,#I_BIT | F_BIT | ARM_MODE_SVC
  90              	
  91              	/*- Save scratch/used registers and LR in User Stack */
  92 0028 0E502DE9 	            stmfd       sp!, { r1-r3, r12, lr}
  93              	
  94              	/*- Branch to the routine pointed by the AIC_FVR */
  95 002c 0FE0A0E1 	            mov         r14, pc
  96 0030 10FF2FE1 	            bx          r0
  97              	
  98              	/*- Restore scratch/used registers and LR from User Stack */
  99 0034 0E50BDE8 	            ldmia       sp!, { r1-r3, r12, lr}
 100              	
 101              	/*- Leave Interrupts disabled and switch back in FIQ mode */
 102 0038 D1F021E3 	            msr         CPSR_c, #I_BIT | F_BIT | ARM_MODE_FIQ
 103              	
 104              	/*- Restore the R0 ARM_MODE_SVC register */
 105 003c 0900A0E1 	            mov         r0,r9
 106              	
 107              	/*- Restore the Program Counter using the LR_fiq directly in the PC */
 108 0040 04F05EE2 	            subs        pc,lr,#4
 109              		.align 0
 110              	.RAM_TOP:
 111 0044 00000000 		.word	Top_Stack
 112              	
 113              	InitReset:
 114              	/*------------------------------------------------------------------------------
 115              	/*- Low level Init (PMC, AIC, ? ....) by C function AT91F_LowLevelInit
 116              	/*------------------------------------------------------------------------------*/
 117              	            	.extern   AT91F_LowLevelInit
 118              	/*- minumum C initialization */
 119              	/*- call  AT91F_LowLevelInit( void) */
 120              	
 121 0048 0CD01FE5 	            ldr     r13,.RAM_TOP            /* temporary stack in internal RAM */
 122              	/*--Call Low level init function in ABSOLUTE through the Interworking	*/
 123 004c C4009FE5 		        ldr	    r0,=AT91F_LowLevelInit
 124 0050 0FE0A0E1 	            mov     lr, pc
 125 0054 10FF2FE1 		        bx	    r0
 126              	/*------------------------------------------------------------------------------
 127              	//*- Stack Sizes Definition
 128              	//*------------------------
 129              	//*- Interrupt Stack requires 2 words x 8 priority level x 4 bytes when using
 130              	//*- the vectoring. This assume that the IRQ management.
 131              	//*- The Interrupt Stack must be adjusted depending on the interrupt handlers.
 132              	//*- Fast Interrupt not requires stack If in your application it required you must
 133              	//*- be definehere.
 134              	//*- The System stack size is not defined and is limited by the free internal
 135              	//*- SRAM.
 136              	//*------------------------------------------------------------------------------*/
 137              	
 138              	/*------------------------------------------------------------------------------
 139              	//*- Top of Stack Definition
 140              	//*-------------------------
 141              	//*- Interrupt and Supervisor Stack are located at the top of internal memory in 
 142              	//*- order to speed the exception handling context saving and restoring.
 143              	//*- ARM_MODE_SVC (Application, C) Stack is located at the top of the external memory.
 144              	//*------------------------------------------------------------------------------*/
 145              	
 146              		  .EQU		IRQ_STACK_SIZE,    (3*8*4)
 147              	          .EQU		ARM_MODE_FIQ,       0x11
 148              	          .EQU		ARM_MODE_IRQ,       0x12
 149              	          .EQU		ARM_MODE_SVC,       0x13
 150              	
 151              	          .EQU		I_BIT,              0x80
 152              	          .EQU		F_BIT,              0x40
 153              	
 154              	/*------------------------------------------------------------------------------
 155              	//*- Setup the stack for each mode
 156              	//*-------------------------------*/
 157 0058 0D00A0E1 	                mov     r0,r13
 158              	
 159              	/*- Set up Fast Interrupt Mode and set FIQ Mode Stack*/
 160 005c D1F021E3 	                msr     CPSR_c, #ARM_MODE_FIQ | I_BIT | F_BIT
 161              	/*- Init the FIQ register*/
 162 0060 B4809FE5 	            	ldr     r8, =AT91C_BASE_AIC
 163              	
 164              	/*- Set up Interrupt Mode and set IRQ Mode Stack*/
 165 0064 D2F021E3 	                msr     CPSR_c, #ARM_MODE_IRQ | I_BIT | F_BIT
 166 0068 00D0A0E1 	                mov     r13, r0                     /* Init stack IRQ */
 167 006c 600040E2 	                sub     r0, r0, #IRQ_Stack_Size
 168              	/*- Set up Supervisor Mode and set Supervisor Mode Stack*/
 169 0070 13F021E3 	                msr     CPSR_c, #ARM_MODE_SVC
 170 0074 00D0A0E1 	                mov     r13, r0                     /* Init stack Sup */
 171              	
 172              	/*- Enable interrupt & Set up Supervisor Mode and set Supervisor Mode Stack*/
 173              	
 174              	# Relocate .data section (Copy from ROM to RAM)
 175 0078 A0109FE5 	                LDR     R1, =_etext
 176 007c A0209FE5 	                LDR     R2, =_data
 177 0080 A0309FE5 	                LDR     R3, =_edata
 178 0084 030052E1 	LoopRel:        CMP     R2, R3
 179 0088 04009134 	                LDRLO   R0, [R1], #4
 180 008c 04008234 	                STRLO   R0, [R2], #4
 181 0090 1F00003A 	                BLO     LoopRel
 182              	
 183              	# Clear .bss section (Zero init)
 184 0094 0000A0E3 	                MOV     R0, #0
 185 0098 8C109FE5 	                LDR     R1, =__bss_start__
 186 009c 8C209FE5 	                LDR     R2, =__bss_end__
 187 00a0 020051E1 	LoopZI:         CMP     R1, R2
 188 00a4 04008134 	                STRLO   R0, [R1], #4
 189 00a8 2600003A 	                BLO     LoopZI
 190              	
 191 00ac 80E09FE5 			ldr	lr,=exit
 192 00b0 80009FE5 			ldr	r0,=main
 193 00b4 10FF2FE1 			bx	r0
 194              			
 196              	        .endfunc
 197              			
 198              	/* "exit" dummy added by mthomas to avoid sbrk write read etc. needed
 199              	   by the newlib default "exit" */
 200              	        .global exit
 201              	        .func   exit
 202              	exit:
 203 00b8 2C0000EA 	        b    .
 205              	        .endfunc
 206              			
 207              	/*------------------------------------------------------------------------------
 208              	//*- Manage exception
 209              	//*---------------
 210              	//*- This module The exception must be ensure in ARM mode
 211              	//*------------------------------------------------------------------------------
 212              	//*------------------------------------------------------------------------------
 213              	//*- Function             : IRQ_Handler_Entry
 214              	//*- Treatments           : IRQ Controller Interrupt Handler.
 215              	//*- Called Functions     : AIC_IVR[interrupt] 
 216              	//*------------------------------------------------------------------------------*/
 217              	        .global IRQ_Handler_Entry
 218              	        .func   IRQ_Handler_Entry
 219              	
 220              	IRQ_Handler_Entry:
 221              	
 222              	/*- Manage Exception Entry  */
 223              	/*- Adjust and save LR_irq in IRQ stack  */
 224 00bc 04E04EE2 	            sub         lr, lr, #4
 225 00c0 00402DE9 	            stmfd       sp!, {lr}
 226              	
 227              	/*- Save SPSR need to be saved for nested interrupt */
 228 00c4 00E04FE1 	            mrs         r14, SPSR
 229 00c8 00402DE9 	            stmfd       sp!, {r14}
 230              	
 231              	/*- Save and r0 in IRQ stack  */
 232 00cc 01002DE9 	            stmfd       sp!, {r0}
 233              	
 234              	/*- Write in the IVR to support Protect Mode  */
 235              	/*- No effect in Normal Mode  */
 236              	/*- De-assert the NIRQ and clear the source in Protect Mode */
 237 00d0 44E09FE5 	            ldr         r14, =AT91C_BASE_AIC
 238 00d4 00019EE5 		    ldr         r0 , [r14, #AIC_IVR]
 239 00d8 00E18EE5 		    str         r14, [r14, #AIC_IVR]
 240              	
 241              	/*- Enable Interrupt and Switch in Supervisor Mode */
 242 00dc 13F021E3 	            msr         CPSR_c, #ARM_MODE_SVC
 243              	
 244              	/*- Save scratch/used registers and LR in User Stack */
 245 00e0 0E502DE9 	            stmfd       sp!, { r1-r3, r12, r14}
 246              	
 247              	/*- Branch to the routine pointed by the AIC_IVR  */
 248 00e4 0FE0A0E1 	            mov         r14, pc
 249 00e8 10FF2FE1 	            bx          r0
 250              	/*- Restore scratch/used registers and LR from User Stack*/
 251 00ec 0E50BDE8 	            ldmia       sp!, { r1-r3, r12, r14}
 252              	
 253              	/*- Disable Interrupt and switch back in IRQ mode */
 254 00f0 92F021E3 	            msr         CPSR_c, #I_BIT | ARM_MODE_IRQ
 255              	
 256              	/*- Mark the End of Interrupt on the AIC */
 257 00f4 20E09FE5 	            ldr         r14, =AT91C_BASE_AIC
 258 00f8 30E18EE5 	            str         r14, [r14, #AIC_EOICR]
 259              	
 260              	/*- Restore SPSR_irq and r0 from IRQ stack */
 261 00fc 0100BDE8 	            ldmia       sp!, {r0}
 262              	
 263              	/*- Restore SPSR_irq and r0 from IRQ stack */
 264 0100 0040BDE8 	            ldmia       sp!, {r14}
 265 0104 0EF06FE1 	            msr         SPSR_cxsf, r14
 266              	
 267              	/*- Restore adjusted  LR_irq from IRQ stack directly in the PC */
 268 0108 0080FDE8 	            ldmia       sp!, {pc}^
 269              		
 271              	        .endfunc
 272              	/*---------------------------------------------------------------
 273              	//* ?EXEPTION_VECTOR
 274              	//* This module is only linked if needed for closing files.
 275              	//*---------------------------------------------------------------*/
 276              	        .global AT91F_Default_FIQ_handler
 277              	        .func   AT91F_Default_FIQ_handler
 278              	AT91F_Default_FIQ_handler:
 279 010c FEFFFFEA 	            b     AT91F_Default_FIQ_handler
 281              	        .endfunc
 282              	
 283              	        .global AT91F_Default_IRQ_handler
 284              	        .func   AT91F_Default_IRQ_handler
 285              	AT91F_Default_IRQ_handler:
 286 0110 FEFFFFEA 	            b     AT91F_Default_IRQ_handler
 288              	        .endfunc
 289              	
 290              	        .global AT91F_Spurious_handler
 291              	        .func   AT91F_Spurious_handler
 292              	AT91F_Spurious_handler:
 293 0114 FEFFFFEA 	            b     AT91F_Spurious_handler
 295              	        .endfunc
 296              	
 297 0118 00000000 	        .end
 297      00F0FFFF 
 297      00000000 
 297      00000000 
 297      00000000 
DEFINED SYMBOLS
                            *ABS*:00000000 Cstartup.S
          Cstartup.S:19     *ABS*:00000060 IRQ_Stack_Size
          Cstartup.S:23     *ABS*:00000100 AIC_IVR
          Cstartup.S:24     *ABS*:00000104 AIC_FVR
          Cstartup.S:25     *ABS*:00000130 AIC_EOICR
          Cstartup.S:26     *ABS*:fffff000 AT91C_BASE_AIC
          Cstartup.S:36     .internal_ram_top:00000000 $a
          Cstartup.S:39     .internal_ram_top:00000000 Top_Stack
          Cstartup.S:49     .text:00000000 _startup
          Cstartup.S:50     .text:00000000 reset
          Cstartup.S:61     .text:00000000 $a
          Cstartup.S:113    .text:00000048 InitReset
          Cstartup.S:62     .text:00000004 undefvec
          Cstartup.S:64     .text:00000008 swivec
          Cstartup.S:66     .text:0000000c pabtvec
          Cstartup.S:68     .text:00000010 dabtvec
          Cstartup.S:70     .text:00000014 rsvdvec
          Cstartup.S:72     .text:00000018 irqvec
          Cstartup.S:220    .text:000000bc IRQ_Handler_Entry
          Cstartup.S:74     .text:0000001c fiqvec
          Cstartup.S:81     .text:0000001c FIQ_Handler_Entry
                            *ABS*:00000080 I_BIT
                            *ABS*:00000040 F_BIT
                            *ABS*:00000013 ARM_MODE_SVC
                            *ABS*:00000011 ARM_MODE_FIQ
          Cstartup.S:110    .text:00000044 .RAM_TOP
          Cstartup.S:111    .text:00000044 $d
          Cstartup.S:121    .text:00000048 $a
          Cstartup.S:146    *ABS*:00000060 IRQ_STACK_SIZE
          Cstartup.S:148    *ABS*:00000012 ARM_MODE_IRQ
          Cstartup.S:178    .text:00000084 LoopRel
          Cstartup.S:187    .text:000000a0 LoopZI
          Cstartup.S:202    .text:000000b8 exit
          Cstartup.S:278    .text:0000010c AT91F_Default_FIQ_handler
          Cstartup.S:285    .text:00000110 AT91F_Default_IRQ_handler
          Cstartup.S:292    .text:00000114 AT91F_Spurious_handler
          Cstartup.S:297    .text:00000118 $d

UNDEFINED SYMBOLS
AT91F_LowLevelInit
_etext
_data
_edata
__bss_start__
__bss_end__
main
