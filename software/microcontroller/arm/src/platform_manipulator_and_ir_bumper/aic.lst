   1              		.file	"aic.c"
   9              	.Ltext0:
  10              		.align	2
  11              		.global	AIC_ConfigureIT
  13              	AIC_ConfigureIT:
  14              	.LFB290:
  15              		.file 1 "aic.c"
   1:aic.c         **** /* ----------------------------------------------------------------------------
   2:aic.c         ****  *         ATMEL Microcontroller Software Support 
   3:aic.c         ****  * ----------------------------------------------------------------------------
   4:aic.c         ****  * Copyright (c) 2008, Atmel Corporation
   5:aic.c         ****  *
   6:aic.c         ****  * All rights reserved.
   7:aic.c         ****  *
   8:aic.c         ****  * Redistribution and use in source and binary forms, with or without
   9:aic.c         ****  * modification, are permitted provided that the following conditions are met:
  10:aic.c         ****  *
  11:aic.c         ****  * - Redistributions of source code must retain the above copyright notice,
  12:aic.c         ****  * this list of conditions and the disclaimer below.
  13:aic.c         ****  *
  14:aic.c         ****  * Atmel's name may not be used to endorse or promote products derived from
  15:aic.c         ****  * this software without specific prior written permission.
  16:aic.c         ****  *
  17:aic.c         ****  * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
  18:aic.c         ****  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  19:aic.c         ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  20:aic.c         ****  * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
  21:aic.c         ****  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  22:aic.c         ****  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
  23:aic.c         ****  * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  24:aic.c         ****  * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  25:aic.c         ****  * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  26:aic.c         ****  * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  27:aic.c         ****  * ----------------------------------------------------------------------------
  28:aic.c         ****  */
  29:aic.c         **** 
  30:aic.c         **** //------------------------------------------------------------------------------
  31:aic.c         **** //         Headers
  32:aic.c         **** //------------------------------------------------------------------------------
  33:aic.c         **** 
  34:aic.c         **** #include "aic.h"
  35:aic.c         **** #include "Board.h"
  36:aic.c         **** 
  37:aic.c         **** //------------------------------------------------------------------------------
  38:aic.c         **** //         Global functions
  39:aic.c         **** //------------------------------------------------------------------------------
  40:aic.c         **** 
  41:aic.c         **** //------------------------------------------------------------------------------
  42:aic.c         **** /// Configures an interrupt in the AIC. The interrupt is identified by its
  43:aic.c         **** /// source (AT91C_ID_xxx) and is configured to use the specified mode and
  44:aic.c         **** /// interrupt handler function. Mode is the value that will be put in AIC_SMRx
  45:aic.c         **** /// and the function address will be set in AIC_SVRx.
  46:aic.c         **** /// The interrupt is disabled before configuration, so it is useless
  47:aic.c         **** /// to do it before calling this function. When AIC_ConfigureIT returns, the
  48:aic.c         **** /// interrupt will always be disabled and cleared; it must be enabled by a
  49:aic.c         **** /// call to AIC_EnableIT().
  50:aic.c         **** /// \param source  Interrupt source to configure.
  51:aic.c         **** /// \param mode  Triggering mode and priority of the interrupt.
  52:aic.c         **** /// \param handler  Interrupt handler function.
  53:aic.c         **** //------------------------------------------------------------------------------
  54:aic.c         **** void AIC_ConfigureIT(
  55:aic.c         ****     unsigned int source,
  56:aic.c         ****     unsigned int mode,
  57:aic.c         ****     void (*handler)(void))
  58:aic.c         **** {
  16              		.loc 1 58 0
  17              		@ Function supports interworking.
  18              		@ args = 0, pretend = 0, frame = 0
  19              		@ frame_needed = 0, uses_anonymous_args = 0
  20              	.LVL0:
  59:aic.c         ****     // Disable the interrupt first
  60:aic.c         ****     AT91C_BASE_AIC->AIC_IDCR = 1 << source;
  21              		.loc 1 60 0
  22 0000 0130A0E3 		mov	r3, #1
  23 0004 1330A0E1 		mov	r3, r3, asl r0
  24              		.loc 1 58 0
  25 0008 04E02DE5 		str	lr, [sp, #-4]!
  26              	.LCFI0:
  61:aic.c         **** 
  62:aic.c         ****     // Configure mode and handler
  63:aic.c         ****     AT91C_BASE_AIC->AIC_SMR[source] = mode;
  27              		.loc 1 63 0
  28 000c 0001A0E1 		mov	r0, r0, asl #2
  29              	.LVL1:
  30              		.loc 1 60 0
  31 0010 0FECE0E3 		mvn	lr, #3840
  32              		.loc 1 63 0
  33 0014 01CA40E2 		sub	ip, r0, #4096
  34              		.loc 1 60 0
  35 0018 25308EE5 		str	r3, [lr, #37]
  36              		.loc 1 63 0
  37 001c 00108CE5 		str	r1, [ip, #0]
  64:aic.c         ****     AT91C_BASE_AIC->AIC_SVR[source] = (unsigned int) handler;
  38              		.loc 1 64 0
  39 0020 802F00E5 		str	r2, [r0, #-3968]
  65:aic.c         **** 
  66:aic.c         ****     // Clear interrupt
  67:aic.c         ****     AT91C_BASE_AIC->AIC_ICCR = 1 << source;
  40              		.loc 1 67 0
  41 0024 29308EE5 		str	r3, [lr, #41]
  68:aic.c         **** }
  42              		.loc 1 68 0
  43 0028 04E09DE4 		ldr	lr, [sp], #4
  44 002c 1EFF2FE1 		bx	lr
  45              	.LFE290:
  47              		.align	2
  48              		.global	AIC_EnableIT
  50              	AIC_EnableIT:
  51              	.LFB291:
  69:aic.c         **** 
  70:aic.c         **** //------------------------------------------------------------------------------
  71:aic.c         **** /// Enables interrupts coming from the given (unique) source (AT91C_ID_xxx).
  72:aic.c         **** /// \param source  Interrupt source to enable.
  73:aic.c         **** //------------------------------------------------------------------------------
  74:aic.c         **** void AIC_EnableIT(unsigned int source)
  75:aic.c         **** {
  52              		.loc 1 75 0
  53              		@ Function supports interworking.
  54              		@ args = 0, pretend = 0, frame = 0
  55              		@ frame_needed = 0, uses_anonymous_args = 0
  56              		@ link register save eliminated.
  57              	.LVL2:
  76:aic.c         ****     AT91C_BASE_AIC->AIC_IECR = 1 << source;
  58              		.loc 1 76 0
  59 0030 0130A0E3 		mov	r3, #1
  60 0034 1330A0E1 		mov	r3, r3, asl r0
  61 0038 0F2CE0E3 		mvn	r2, #3840
  62              		.loc 1 75 0
  63              		@ lr needed for prologue
  64              		.loc 1 76 0
  65 003c 213082E5 		str	r3, [r2, #33]
  77:aic.c         **** }
  66              		.loc 1 77 0
  67 0040 1EFF2FE1 		bx	lr
  68              	.LFE291:
  70              		.align	2
  71              		.global	AIC_DisableIT
  73              	AIC_DisableIT:
  74              	.LFB292:
  78:aic.c         **** 
  79:aic.c         **** //------------------------------------------------------------------------------
  80:aic.c         **** /// Disables interrupts coming from the given (unique) source (AT91C_ID_xxx).
  81:aic.c         **** /// \param source  Interrupt source to enable.
  82:aic.c         **** //------------------------------------------------------------------------------
  83:aic.c         **** void AIC_DisableIT(unsigned int source)
  84:aic.c         **** {
  75              		.loc 1 84 0
  76              		@ Function supports interworking.
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79              		@ link register save eliminated.
  80              	.LVL3:
  85:aic.c         ****     AT91C_BASE_AIC->AIC_IDCR = 1 << source;
  81              		.loc 1 85 0
  82 0044 0130A0E3 		mov	r3, #1
  83 0048 1330A0E1 		mov	r3, r3, asl r0
  84 004c 0F2CE0E3 		mvn	r2, #3840
  85              		.loc 1 84 0
  86              		@ lr needed for prologue
  87              		.loc 1 85 0
  88 0050 253082E5 		str	r3, [r2, #37]
  86:aic.c         **** }
  89              		.loc 1 86 0
  90 0054 1EFF2FE1 		bx	lr
  91              	.LFE292:
 139              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 aic.c
     /tmp/ccgJuhyR.s:13     .text:00000000 AIC_ConfigureIT
     /tmp/ccgJuhyR.s:22     .text:00000000 $a
     /tmp/ccgJuhyR.s:50     .text:00000030 AIC_EnableIT
     /tmp/ccgJuhyR.s:73     .text:00000044 AIC_DisableIT

NO UNDEFINED SYMBOLS
