   1              		.file	"math.c"
   9              	.Ltext0:
  10              		.align	2
  11              		.global	min
  13              	min:
  14              	.LFB2:
  15              		.file 1 "math.c"
   1:math.c        **** /* ----------------------------------------------------------------------------
   2:math.c        ****  *         ATMEL Microcontroller Software Support 
   3:math.c        ****  * ----------------------------------------------------------------------------
   4:math.c        ****  * Copyright (c) 2008, Atmel Corporation
   5:math.c        ****  *
   6:math.c        ****  * All rights reserved.
   7:math.c        ****  *
   8:math.c        ****  * Redistribution and use in source and binary forms, with or without
   9:math.c        ****  * modification, are permitted provided that the following conditions are met:
  10:math.c        ****  *
  11:math.c        ****  * - Redistributions of source code must retain the above copyright notice,
  12:math.c        ****  * this list of conditions and the disclaimer below.
  13:math.c        ****  *
  14:math.c        ****  * Atmel's name may not be used to endorse or promote products derived from
  15:math.c        ****  * this software without specific prior written permission.
  16:math.c        ****  *
  17:math.c        ****  * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
  18:math.c        ****  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  19:math.c        ****  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
  20:math.c        ****  * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
  21:math.c        ****  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  22:math.c        ****  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
  23:math.c        ****  * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  24:math.c        ****  * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  25:math.c        ****  * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  26:math.c        ****  * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  27:math.c        ****  * ----------------------------------------------------------------------------
  28:math.c        ****  */
  29:math.c        **** 
  30:math.c        **** //------------------------------------------------------------------------------
  31:math.c        **** //         Headers
  32:math.c        **** //------------------------------------------------------------------------------
  33:math.c        **** 
  34:math.c        **** #include "math.h"
  35:math.c        **** 
  36:math.c        **** //------------------------------------------------------------------------------
  37:math.c        **** //         Exported functions
  38:math.c        **** //------------------------------------------------------------------------------
  39:math.c        **** 
  40:math.c        **** //------------------------------------------------------------------------------
  41:math.c        **** /// Returns the minimum value between two integers.
  42:math.c        **** /// \param a  First integer to compare.
  43:math.c        **** /// \param b  Second integer to compare.
  44:math.c        **** //------------------------------------------------------------------------------
  45:math.c        **** unsigned int min(unsigned int a, unsigned int b)
  46:math.c        **** { 
  16              		.loc 1 46 0
  17              		@ Function supports interworking.
  18              		@ args = 0, pretend = 0, frame = 0
  19              		@ frame_needed = 0, uses_anonymous_args = 0
  20              		@ link register save eliminated.
  21              	.LVL0:
  47:math.c        ****     if (a < b) {
  48:math.c        **** 
  49:math.c        ****         return a;
  50:math.c        ****     }
  51:math.c        ****     else {
  52:math.c        **** 
  53:math.c        ****         return b;
  54:math.c        ****     }
  55:math.c        **** }
  22              		.loc 1 55 0
  23 0000 010050E1 		cmp	r0, r1
  24 0004 0100A021 		movcs	r0, r1
  25              	.LVL1:
  26              		.loc 1 46 0
  27              		@ lr needed for prologue
  28              		.loc 1 55 0
  29 0008 1EFF2FE1 		bx	lr
  30              	.LFE2:
  32              		.align	2
  33              		.global	absv
  35              	absv:
  36              	.LFB3:
  56:math.c        **** 
  57:math.c        **** //------------------------------------------------------------------------------
  58:math.c        **** /// Returns the absolute value of an integer.
  59:math.c        **** /// \param value  Integer value.
  60:math.c        **** //------------------------------------------------------------------------------
  61:math.c        **** // Do not call this function "abs", problem with gcc !
  62:math.c        **** unsigned int absv(signed int value)
  63:math.c        **** {
  37              		.loc 1 63 0
  38              		@ Function supports interworking.
  39              		@ args = 0, pretend = 0, frame = 0
  40              		@ frame_needed = 0, uses_anonymous_args = 0
  41              		@ link register save eliminated.
  42              	.LVL2:
  64:math.c        ****     if (value < 0) {
  65:math.c        **** 
  66:math.c        ****         return -value;
  67:math.c        ****     }
  68:math.c        ****     else {
  69:math.c        **** 
  70:math.c        ****         return value;
  71:math.c        ****     }
  72:math.c        **** }
  43              		.loc 1 72 0
  44 000c 000050E3 		cmp	r0, #0
  45 0010 000060B2 		rsblt	r0, r0, #0
  46              	.LVL3:
  47              		.loc 1 63 0
  48              		@ lr needed for prologue
  49              		.loc 1 72 0
  50 0014 1EFF2FE1 		bx	lr
  51              	.LFE3:
  53              		.align	2
  54              		.global	power
  56              	power:
  57              	.LFB4:
  73:math.c        **** 
  74:math.c        **** //------------------------------------------------------------------------------
  75:math.c        **** /// Computes and returns x power of y.
  76:math.c        **** /// \param x  Value.
  77:math.c        **** /// \param y  Power.
  78:math.c        **** //------------------------------------------------------------------------------
  79:math.c        **** unsigned int power(unsigned int x, unsigned int y)
  80:math.c        **** {
  58              		.loc 1 80 0
  59              		@ Function supports interworking.
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 0, uses_anonymous_args = 0
  62              		@ link register save eliminated.
  63              	.LVL4:
  64 0018 0030A0E1 		mov	r3, r0
  65 001c 0100A0E3 		mov	r0, #1
  66              	.LVL5:
  67              		@ lr needed for prologue
  68 0020 090000EA 		b	.L9
  69              	.L10:
  81:math.c        ****     unsigned int result = 1;
  82:math.c        ****     
  83:math.c        ****     while (y > 0) {
  84:math.c        **** 
  85:math.c        ****         result *= x;
  70              		.loc 1 85 0
  71 0024 930000E0 		mul	r0, r3, r0
  86:math.c        ****         y--;
  72              		.loc 1 86 0
  73 0028 011041E2 		sub	r1, r1, #1
  74              	.L9:
  75              		.loc 1 83 0
  76 002c 000051E3 		cmp	r1, #0
  77 0030 0700001A 		bne	.L10
  87:math.c        ****     } 
  88:math.c        ****     return result;
  89:math.c        **** }
  78              		.loc 1 89 0
  79 0034 1EFF2FE1 		bx	lr
  80              	.LFE4:
 122              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 math.c
     /tmp/cc03P6qx.s:13     .text:00000000 min
     /tmp/cc03P6qx.s:23     .text:00000000 $a
     /tmp/cc03P6qx.s:35     .text:0000000c absv
     /tmp/cc03P6qx.s:56     .text:00000018 power

NO UNDEFINED SYMBOLS
