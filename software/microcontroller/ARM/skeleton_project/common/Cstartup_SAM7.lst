   1              		.file	"Cstartup_SAM7.c"
   9              	.Ltext0:
  10              		.section	.text.AT91F_LowLevelInit,"ax",%progbits
  11              		.align	2
  12              		.global	AT91F_LowLevelInit
  14              	AT91F_LowLevelInit:
  15              	.LFB290:
  16              		.file 1 "common/Cstartup_SAM7.c"
   1:common/Cstartup_SAM7.c **** //-----------------------------------------------------------------------------
   2:common/Cstartup_SAM7.c **** //         ATMEL Microcontroller Software Support  -  ROUSSET  -
   3:common/Cstartup_SAM7.c **** //-----------------------------------------------------------------------------
   4:common/Cstartup_SAM7.c **** // DISCLAIMER:  THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
   5:common/Cstartup_SAM7.c **** // IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
   6:common/Cstartup_SAM7.c **** // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
   7:common/Cstartup_SAM7.c **** // DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
   8:common/Cstartup_SAM7.c **** // INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
   9:common/Cstartup_SAM7.c **** // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
  10:common/Cstartup_SAM7.c **** // OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  11:common/Cstartup_SAM7.c **** // LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  12:common/Cstartup_SAM7.c **** // NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  13:common/Cstartup_SAM7.c **** // EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  14:common/Cstartup_SAM7.c **** //-----------------------------------------------------------------------------
  15:common/Cstartup_SAM7.c **** // File Name           : Cstartup_SAM7.c
  16:common/Cstartup_SAM7.c **** // Object              : Low level initialisations written in C for Tools
  17:common/Cstartup_SAM7.c **** //                       For AT91SAM7S with 2 flash plane
  18:common/Cstartup_SAM7.c **** // Creation            : JPP  09-May-2006
  19:common/Cstartup_SAM7.c **** //-----------------------------------------------------------------------------
  20:common/Cstartup_SAM7.c **** 
  21:common/Cstartup_SAM7.c **** // slightly modified by Martin Thomas:
  22:common/Cstartup_SAM7.c **** // - Disable Watchdog first
  23:common/Cstartup_SAM7.c **** // - project.h -> board.h
  24:common/Cstartup_SAM7.c **** // - modified parentheses for AT91C_BASE_PMC->PMC_MOR to avoid compiler warning
  25:common/Cstartup_SAM7.c **** 
  26:common/Cstartup_SAM7.c **** #include "Board.h"
  27:common/Cstartup_SAM7.c **** 
  28:common/Cstartup_SAM7.c **** //  The following functions must be write in ARM mode this function called
  29:common/Cstartup_SAM7.c **** // directly by exception vector
  30:common/Cstartup_SAM7.c **** extern void AT91F_Spurious_handler(void);
  31:common/Cstartup_SAM7.c **** extern void AT91F_Default_IRQ_handler(void);
  32:common/Cstartup_SAM7.c **** extern void AT91F_Default_FIQ_handler(void);
  33:common/Cstartup_SAM7.c **** 
  34:common/Cstartup_SAM7.c **** //*----------------------------------------------------------------------------
  35:common/Cstartup_SAM7.c **** //* \fn    AT91F_LowLevelInit
  36:common/Cstartup_SAM7.c **** //* \brief This function performs very low level HW initialization
  37:common/Cstartup_SAM7.c **** //*        this function can use a Stack, depending the compilation
  38:common/Cstartup_SAM7.c **** //*        optimization mode
  39:common/Cstartup_SAM7.c **** //*----------------------------------------------------------------------------
  40:common/Cstartup_SAM7.c **** void AT91F_LowLevelInit(void)
  41:common/Cstartup_SAM7.c **** {
  17              		.loc 1 41 0
  18              		@ Function supports interworking.
  19              		@ args = 0, pretend = 0, frame = 0
  20              		@ frame_needed = 0, uses_anonymous_args = 0
  21              		@ link register save eliminated.
  42:common/Cstartup_SAM7.c ****     unsigned char i;
  43:common/Cstartup_SAM7.c **** 
  44:common/Cstartup_SAM7.c ****     ///////////////////////////////////////////////////////////////////////////
  45:common/Cstartup_SAM7.c ****     //  Disable Watchdog (write once register)
  46:common/Cstartup_SAM7.c ****     ///////////////////////////////////////////////////////////////////////////
  47:common/Cstartup_SAM7.c ****     AT91C_BASE_WDTC->WDTC_WDMR = AT91C_WDTC_WDDIS;
  22              		.loc 1 47 0
  23 0000 0229A0E3 		mov	r2, #32768
  24 0004 023CE0E3 		mvn	r3, #512
  25 0008 BB2003E5 		str	r2, [r3, #-187]
  48:common/Cstartup_SAM7.c **** 
  49:common/Cstartup_SAM7.c ****     ///////////////////////////////////////////////////////////////////////////
  50:common/Cstartup_SAM7.c ****     // EFC Init
  51:common/Cstartup_SAM7.c ****     ///////////////////////////////////////////////////////////////////////////
  52:common/Cstartup_SAM7.c ****     AT91C_BASE_MC->MC_FMR = AT91C_MC_FWS_1FWS ;
  26              		.loc 1 52 0
  27 000c 7F2C42E2 		sub	r2, r2, #32512
  28 0010 023C83E2 		add	r3, r3, #512
  29 0014 9F2003E5 		str	r2, [r3, #-159]
  53:common/Cstartup_SAM7.c **** 
  54:common/Cstartup_SAM7.c ****     ///////////////////////////////////////////////////////////////////////////
  55:common/Cstartup_SAM7.c ****     // Init PMC Step 1. Enable Main Oscillator
  56:common/Cstartup_SAM7.c ****     // Main Oscillator startup time is board specific:
  57:common/Cstartup_SAM7.c ****     // Main Oscillator Startup Time worst case (3MHz) corresponds to 15ms
  58:common/Cstartup_SAM7.c ****     // (0x40 for AT91C_CKGR_OSCOUNT field)
  59:common/Cstartup_SAM7.c ****     ///////////////////////////////////////////////////////////////////////////
  60:common/Cstartup_SAM7.c ****     AT91C_BASE_PMC->PMC_MOR = ( AT91C_CKGR_OSCOUNT & (0x40 <<8)) | AT91C_CKGR_MOSCEN;
  30              		.loc 1 60 0
  31 0018 A8209FE5 		ldr	r2, .L26
  32 001c 033C43E2 		sub	r3, r3, #768
  33 0020 DF2003E5 		str	r2, [r3, #-223]
  34              		.loc 1 41 0
  35              		@ lr needed for prologue
  36              	.L2:
  61:common/Cstartup_SAM7.c ****     // Wait Main Oscillator stabilization
  62:common/Cstartup_SAM7.c ****     while(!(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MOSCS));
  37              		.loc 1 62 0
  38 0024 032CE0E3 		mvn	r2, #768
  39 0028 973012E5 		ldr	r3, [r2, #-151]
  40 002c 010013E3 		tst	r3, #1
  41 0030 0700000A 		beq	.L2
  63:common/Cstartup_SAM7.c **** 
  64:common/Cstartup_SAM7.c ****     ///////////////////////////////////////////////////////////////////////////
  65:common/Cstartup_SAM7.c ****     // Init PMC Step 2.
  66:common/Cstartup_SAM7.c ****     // Set PLL to 96MHz (96,109MHz) and UDP Clock to 48MHz
  67:common/Cstartup_SAM7.c ****     // PLL Startup time depends on PLL RC filter: worst case is choosen
  68:common/Cstartup_SAM7.c ****     // UDP Clock (48,058MHz) is compliant with the Universal Serial Bus
  69:common/Cstartup_SAM7.c ****     // Specification (+/- 0.25% for full speed)
  70:common/Cstartup_SAM7.c ****     ///////////////////////////////////////////////////////////////////////////
  71:common/Cstartup_SAM7.c ****     AT91C_BASE_PMC->PMC_PLLR = AT91C_CKGR_USBDIV_1           |
  42              		.loc 1 71 0
  43 0034 90309FE5 		ldr	r3, .L26+4
  44 0038 D33002E5 		str	r3, [r2, #-211]
  45              	.L4:
  72:common/Cstartup_SAM7.c ****                                (16 << 8)                     |
  73:common/Cstartup_SAM7.c ****                                (AT91C_CKGR_MUL & (72 << 16)) |
  74:common/Cstartup_SAM7.c ****                                (AT91C_CKGR_DIV & 14);
  75:common/Cstartup_SAM7.c ****     // Wait for PLL stabilization
  76:common/Cstartup_SAM7.c ****     while( !(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_LOCK) );
  46              		.loc 1 76 0
  47 003c 033CE0E3 		mvn	r3, #768
  48 0040 973013E5 		ldr	r3, [r3, #-151]
  49 0044 040013E3 		tst	r3, #4
  50 0048 0D00000A 		beq	.L4
  51              	.L14:
  77:common/Cstartup_SAM7.c ****     // Wait until the master clock is established for the case we already
  78:common/Cstartup_SAM7.c ****     // turn on the PLL
  79:common/Cstartup_SAM7.c ****     while( !(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MCKRDY) );
  52              		.loc 1 79 0
  53 004c 032CE0E3 		mvn	r2, #768
  54 0050 973012E5 		ldr	r3, [r2, #-151]
  55 0054 080013E3 		tst	r3, #8
  56 0058 1100000A 		beq	.L14
  80:common/Cstartup_SAM7.c **** 
  81:common/Cstartup_SAM7.c ****     ///////////////////////////////////////////////////////////////////////////
  82:common/Cstartup_SAM7.c ****     // Init PMC Step 3.
  83:common/Cstartup_SAM7.c ****     // Selection of Master Clock MCK equal to (Processor Clock PCK) PLL/2=48MHz
  84:common/Cstartup_SAM7.c ****     // The PMC_MCKR register must not be programmed in a single write operation
  85:common/Cstartup_SAM7.c ****     // (see. Product Errata Sheet)
  86:common/Cstartup_SAM7.c ****     ///////////////////////////////////////////////////////////////////////////
  87:common/Cstartup_SAM7.c ****     AT91C_BASE_PMC->PMC_MCKR = AT91C_PMC_PRES_CLK_2;
  57              		.loc 1 87 0
  58 005c 0430A0E3 		mov	r3, #4
  59 0060 CF3002E5 		str	r3, [r2, #-207]
  60              	.L7:
  88:common/Cstartup_SAM7.c ****     // Wait until the master clock is established
  89:common/Cstartup_SAM7.c ****     while( !(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MCKRDY) );
  61              		.loc 1 89 0
  62 0064 032CE0E3 		mvn	r2, #768
  63 0068 973012E5 		ldr	r3, [r2, #-151]
  64 006c 080013E3 		tst	r3, #8
  65 0070 1700000A 		beq	.L7
  90:common/Cstartup_SAM7.c **** 
  91:common/Cstartup_SAM7.c ****     AT91C_BASE_PMC->PMC_MCKR |= AT91C_PMC_CSS_PLL_CLK;
  66              		.loc 1 91 0
  67 0074 CF3012E5 		ldr	r3, [r2, #-207]
  68 0078 033083E3 		orr	r3, r3, #3
  69 007c CF3002E5 		str	r3, [r2, #-207]
  70              	.L9:
  92:common/Cstartup_SAM7.c ****     // Wait until the master clock is established
  93:common/Cstartup_SAM7.c ****     while( !(AT91C_BASE_PMC->PMC_SR & AT91C_PMC_MCKRDY) );
  71              		.loc 1 93 0
  72 0080 033CE0E3 		mvn	r3, #768
  73 0084 973013E5 		ldr	r3, [r3, #-151]
  74 0088 080013E3 		tst	r3, #8
  75 008c 1E00000A 		beq	.L9
  94:common/Cstartup_SAM7.c **** 
  95:common/Cstartup_SAM7.c ****     ///////////////////////////////////////////////////////////////////////////
  96:common/Cstartup_SAM7.c ****     //  Init AIC: assign corresponding handler for each interrupt source
  97:common/Cstartup_SAM7.c ****     ///////////////////////////////////////////////////////////////////////////
  98:common/Cstartup_SAM7.c ****     AT91C_BASE_AIC->AIC_SVR[0] = (int) AT91F_Default_FIQ_handler ;
  76              		.loc 1 98 0
  77 0090 38209FE5 		ldr	r2, .L26+8
  78 0094 0F3CE0E3 		mvn	r3, #3840
  79 0098 7F2003E5 		str	r2, [r3, #-127]
  80 009c 0110A0E3 		mov	r1, #1
  81              	.L11:
  99:common/Cstartup_SAM7.c ****     for (i = 1; i < 31; i++) {
 100:common/Cstartup_SAM7.c ****         AT91C_BASE_AIC->AIC_SVR[i] = (int) AT91F_Default_IRQ_handler ;
  82              		.loc 1 100 0
  83 00a0 0121A0E1 		mov	r2, r1, asl #2
  84 00a4 28309FE5 		ldr	r3, .L26+12
  85 00a8 011081E2 		add	r1, r1, #1
  86              		.loc 1 99 0
  87 00ac 1F0051E3 		cmp	r1, #31
  88              		.loc 1 100 0
  89 00b0 803F02E5 		str	r3, [r2, #-3968]
  90              		.loc 1 99 0
  91 00b4 2600001A 		bne	.L11
 101:common/Cstartup_SAM7.c ****     }
 102:common/Cstartup_SAM7.c ****     AT91C_BASE_AIC->AIC_SPU = (unsigned int) AT91F_Spurious_handler;
  92              		.loc 1 102 0
  93 00b8 18209FE5 		ldr	r2, .L26+16
  94 00bc 0F3CE0E3 		mvn	r3, #3840
  95 00c0 352083E5 		str	r2, [r3, #53]
 103:common/Cstartup_SAM7.c **** }
  96              		.loc 1 103 0
  97 00c4 1EFF2FE1 		bx	lr
  98              	.L27:
  99              		.align	2
 100              	.L26:
 101 00c8 01400000 		.word	16385
 102 00cc 0E104810 		.word	273158158
 103 00d0 00000000 		.word	AT91F_Default_FIQ_handler
 104 00d4 00000000 		.word	AT91F_Default_IRQ_handler
 105 00d8 00000000 		.word	AT91F_Spurious_handler
 106              	.LFE290:
 132              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 Cstartup_SAM7.c
     /tmp/ccAY3iMo.s:14     .text.AT91F_LowLevelInit:00000000 AT91F_LowLevelInit
     /tmp/ccAY3iMo.s:23     .text.AT91F_LowLevelInit:00000000 $a
     /tmp/ccAY3iMo.s:101    .text.AT91F_LowLevelInit:000000c8 $d

UNDEFINED SYMBOLS
AT91F_Default_FIQ_handler
AT91F_Default_IRQ_handler
AT91F_Spurious_handler
