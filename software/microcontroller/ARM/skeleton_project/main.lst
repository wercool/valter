   1              		.code	16
   2              		.file	"main.cpp"
  10              	.Ltext0:
  11              		.section	.ctors,"aw",%progbits
  12              		.align	2
  13 0000 00000000 		.word	_GLOBAL__I__Z31Periodic_Interval_Timer_handlerv
  14              		.section	.text.main,"ax",%progbits
  15              		.align	2
  16              		.global	main
  17              		.code 16
  18              		.thumb_func
  20              	main:
  21              	.LFB304:
  22              		.file 1 "main.cpp"
   1:main.cpp      **** /*
   2:main.cpp      ****  AT91SAM7S example application "C++" - simple version
   3:main.cpp      **** */
   4:main.cpp      **** 
   5:main.cpp      **** #include <stdint.h>
   6:main.cpp      **** #include <stdio.h>
   7:main.cpp      **** // newlib 1.14.0 workaround
   8:main.cpp      **** #if 0
   9:main.cpp      **** extern "C"
  10:main.cpp      **** {
  11:main.cpp      ****     int	_EXFUN(iscanf, (const char *, ...) _ATTRIBUTE ((__format__ (__scanf__, 1, 2))));
  12:main.cpp      **** }
  13:main.cpp      **** #endif
  14:main.cpp      **** #include "Board.h"
  15:main.cpp      **** #include "dbgu.h"
  16:main.cpp      **** #include "swi.h"
  17:main.cpp      **** 
  18:main.cpp      **** 
  19:main.cpp      **** #define RTTC_INTERRUPT_LEVEL   0
  20:main.cpp      **** #define PIV_200_MS             600000  //* 200 ms for 48 MHz
  21:main.cpp      **** 
  22:main.cpp      **** void Periodic_Interval_Timer_handler(void)
  23:main.cpp      **** {
  24:main.cpp      ****     volatile uint32_t status;
  25:main.cpp      **** 
  26:main.cpp      ****     // Interrupt Acknowledge
  27:main.cpp      ****     status = AT91C_BASE_PITC->PITC_PIVR;
  28:main.cpp      ****     // status = status;
  29:main.cpp      **** 
  30:main.cpp      ****     // toggle LED1
  31:main.cpp      ****     if ((AT91F_PIO_GetInput(AT91C_BASE_PIOA) & LED1 ) == LED1 )
  32:main.cpp      ****     {
  33:main.cpp      ****         AT91F_PIO_ClearOutput( AT91C_BASE_PIOA, LED1 );
  34:main.cpp      ****     }
  35:main.cpp      ****     else
  36:main.cpp      ****     {
  37:main.cpp      ****         AT91F_PIO_SetOutput( AT91C_BASE_PIOA, LED1 );
  38:main.cpp      ****     }
  39:main.cpp      **** }
  40:main.cpp      **** 
  41:main.cpp      **** static void device_init(void)
  42:main.cpp      **** {
  43:main.cpp      ****     // Enable User Reset and set its minimal assertion to 960 us
  44:main.cpp      ****     AT91C_BASE_RSTC->RSTC_RMR = AT91C_RSTC_URSTEN | (0x4<<8) | (unsigned int)(0xA5<<24);
  45:main.cpp      **** 
  46:main.cpp      ****     // Set-up the PIO
  47:main.cpp      ****     // First, enable the clock of the PIO and set the LEDs in output
  48:main.cpp      ****     AT91F_PMC_EnablePeriphClock ( AT91C_BASE_PMC, 1 << AT91C_ID_PIOA ) ;
  49:main.cpp      **** 
  50:main.cpp      ****     // then, we configure the PIO Lines corresponding to LEDs
  51:main.cpp      ****     // to be outputs. No need to set these pins to be driven by the PIO because it is GPIO pins onl
  52:main.cpp      ****     /// AT91F_PIO_CfgOutput( AT91C_BASE_PIOA, LED_MASK ) ;
  53:main.cpp      ****     AT91F_PIO_CfgOutput( AT91C_BASE_PIOA, LED1 ) ;
  54:main.cpp      **** 
  55:main.cpp      ****     // Clear the LED's. On the SAM7S-EK we must apply a "1" to turn off LEDs
  56:main.cpp      ****     /// AT91F_PIO_SetOutput( AT91C_BASE_PIOA, LED_MASK ) ;
  57:main.cpp      ****     AT91F_PIO_SetOutput( AT91C_BASE_PIOA, LED1 ) ;
  58:main.cpp      **** 
  59:main.cpp      ****     // define switch SW1 at PIO input
  60:main.cpp      ****     AT91F_PIO_CfgInput(AT91C_BASE_PIOA,SW1_MASK);
  61:main.cpp      **** 
  62:main.cpp      ****     // Set-up PIT interrupt
  63:main.cpp      ****     AT91F_AIC_ConfigureIt ( AT91C_BASE_AIC, AT91C_ID_SYS, RTTC_INTERRUPT_LEVEL, AT91C_AIC_SRCTYPE_I
  64:main.cpp      ****     AT91C_BASE_PITC->PITC_PIMR = AT91C_PITC_PITEN | AT91C_PITC_PITIEN | PIV_200_MS;  //  IRQ enable
  65:main.cpp      ****     AT91F_AIC_EnableIt (AT91C_BASE_AIC, AT91C_ID_SYS);
  66:main.cpp      **** 
  67:main.cpp      ****     // Set-up DBGU Usart ("UART2")
  68:main.cpp      ****     AT91F_DBGU_Init();
  69:main.cpp      **** }
  70:main.cpp      **** 
  71:main.cpp      **** 
  72:main.cpp      **** class LED2_class
  73:main.cpp      **** {
  74:main.cpp      **** public:
  75:main.cpp      ****     LED2_class();
  76:main.cpp      ****     void on();
  77:main.cpp      ****     void off ();
  78:main.cpp      **** };
  79:main.cpp      **** 
  80:main.cpp      **** LED2_class::LED2_class()
  81:main.cpp      **** {
  82:main.cpp      ****     AT91F_PIO_SetOutput( AT91C_BASE_PIOA, LED2 );
  83:main.cpp      ****     AT91F_PIO_CfgOutput( AT91C_BASE_PIOA, LED2 );
  84:main.cpp      **** }
  85:main.cpp      **** 
  86:main.cpp      **** void LED2_class::on()
  87:main.cpp      **** {
  88:main.cpp      ****     AT91F_PIO_ClearOutput( AT91C_BASE_PIOA, LED2 );
  89:main.cpp      **** }
  90:main.cpp      **** 
  91:main.cpp      **** 
  92:main.cpp      **** void LED2_class::off()
  93:main.cpp      **** {
  94:main.cpp      ****     AT91F_PIO_SetOutput( AT91C_BASE_PIOA, LED2 );
  95:main.cpp      **** }
  96:main.cpp      **** 
  97:main.cpp      **** LED2_class led2;
  98:main.cpp      **** 
  99:main.cpp      **** int main(void)
  23              		.loc 1 99 0
  24 0000 00B5     		push	{lr}
  25              	.LCFI0:
  26              	.LBB20:
  27              	.LBB21:
  28              		.loc 1 44 0
  29 0002 124A     		ldr	r2, .L4
  30 0004 124B     		ldr	r3, .L4+4
  31 0006 9A60     		str	r2, [r3, #8]
  32              	.LBB22:
  33              	.LBB23:
  34              		.file 2 "./common/lib_AT91SAM7S64.h"
   1:./common/lib_AT91SAM7S64.h **** //* ----------------------------------------------------------------------------
   2:./common/lib_AT91SAM7S64.h **** //*         ATMEL Microcontroller Software Support  -  ROUSSET  -
   3:./common/lib_AT91SAM7S64.h **** //* ----------------------------------------------------------------------------
   4:./common/lib_AT91SAM7S64.h **** //* DISCLAIMER:  THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
   5:./common/lib_AT91SAM7S64.h **** //* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
   6:./common/lib_AT91SAM7S64.h **** //* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
   7:./common/lib_AT91SAM7S64.h **** //* DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
   8:./common/lib_AT91SAM7S64.h **** //* INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
   9:./common/lib_AT91SAM7S64.h **** //* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
  10:./common/lib_AT91SAM7S64.h **** //* OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  11:./common/lib_AT91SAM7S64.h **** //* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  12:./common/lib_AT91SAM7S64.h **** //* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  13:./common/lib_AT91SAM7S64.h **** //* EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  14:./common/lib_AT91SAM7S64.h **** //* ----------------------------------------------------------------------------
  15:./common/lib_AT91SAM7S64.h **** //* File Name           : lib_AT91SAM7S64.h
  16:./common/lib_AT91SAM7S64.h **** //* Object              : AT91SAM7S64 inlined functions
  17:./common/lib_AT91SAM7S64.h **** //* Generated           : AT91 SW Application Group  08/18/2006 (15:29:16)
  18:./common/lib_AT91SAM7S64.h **** //*
  19:./common/lib_AT91SAM7S64.h **** //* CVS Reference       : /lib_dbgu.h/1.1/Fri Jan 31 12:18:40 2003//
  20:./common/lib_AT91SAM7S64.h **** //* CVS Reference       : /lib_pmc_SAM7S.h/1.5/Fri Nov  4 09:46:55 2005//
  21:./common/lib_AT91SAM7S64.h **** //* CVS Reference       : /lib_VREG_6085B.h/1.1/Tue Feb  1 16:40:38 2005//
  22:./common/lib_AT91SAM7S64.h **** //* CVS Reference       : /lib_rstc_6098A.h/1.1/Wed Oct  6 09:39:19 2004//
  23:./common/lib_AT91SAM7S64.h **** //* CVS Reference       : /lib_ssc.h/1.4/Fri Jan 31 12:19:20 2003//
  24:./common/lib_AT91SAM7S64.h **** //* CVS Reference       : /lib_wdtc_6080A.h/1.1/Wed Oct  6 09:38:30 2004//
  25:./common/lib_AT91SAM7S64.h **** //* CVS Reference       : /lib_usart.h/1.5/Thu Nov 21 16:01:53 2002//
  26:./common/lib_AT91SAM7S64.h **** //* CVS Reference       : /lib_spi2.h/1.2/Tue Aug 23 15:43:14 2005//
  27:./common/lib_AT91SAM7S64.h **** //* CVS Reference       : /lib_pitc_6079A.h/1.2/Thu Nov  4 14:01:11 2004//
  28:./common/lib_AT91SAM7S64.h **** //* CVS Reference       : /lib_aic_6075b.h/1.2/Mon Jul 18 11:06:01 2005//
  29:./common/lib_AT91SAM7S64.h **** //* CVS Reference       : /lib_twi.h/1.5/Fri Aug  4 08:43:37 2006//
  30:./common/lib_AT91SAM7S64.h **** //* CVS Reference       : /lib_adc.h/1.6/Fri Oct 17 08:12:38 2003//
  31:./common/lib_AT91SAM7S64.h **** //* CVS Reference       : /lib_rttc_6081A.h/1.1/Wed Oct  6 09:39:38 2004//
  32:./common/lib_AT91SAM7S64.h **** //* CVS Reference       : /lib_udp.h/1.5/Mon Aug 29 08:17:54 2005//
  33:./common/lib_AT91SAM7S64.h **** //* CVS Reference       : /lib_tc_1753b.h/1.1/Fri Jan 31 12:20:02 2003//
  34:./common/lib_AT91SAM7S64.h **** //* CVS Reference       : /lib_MC_SAM7S.h/1.1/Tue Feb  1 14:13:05 2005//
  35:./common/lib_AT91SAM7S64.h **** //* CVS Reference       : /lib_pio.h/1.3/Fri Jan 31 12:18:56 2003//
  36:./common/lib_AT91SAM7S64.h **** //* CVS Reference       : /lib_PWM_SAM.h/1.3/Wed Dec  3 10:23:10 2003//
  37:./common/lib_AT91SAM7S64.h **** //* CVS Reference       : /lib_pdc.h/1.2/Tue Jul  2 12:29:40 2002//
  38:./common/lib_AT91SAM7S64.h **** //* ----------------------------------------------------------------------------
  39:./common/lib_AT91SAM7S64.h **** 
  40:./common/lib_AT91SAM7S64.h **** #ifndef lib_AT91SAM7S64_H
  41:./common/lib_AT91SAM7S64.h **** #define lib_AT91SAM7S64_H
  42:./common/lib_AT91SAM7S64.h **** 
  43:./common/lib_AT91SAM7S64.h **** /* *****************************************************************************
  44:./common/lib_AT91SAM7S64.h ****                 SOFTWARE API FOR AIC
  45:./common/lib_AT91SAM7S64.h ****    ***************************************************************************** */
  46:./common/lib_AT91SAM7S64.h **** #define AT91C_AIC_BRANCH_OPCODE ((void (*) ()) 0xE51FFF20) // ldr, pc, [pc, #-&F20]
  47:./common/lib_AT91SAM7S64.h **** 
  48:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
  49:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_AIC_ConfigureIt
  50:./common/lib_AT91SAM7S64.h **** //* \brief Interrupt Handler Initialization
  51:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
  52:./common/lib_AT91SAM7S64.h **** __inline unsigned int AT91F_AIC_ConfigureIt (
  53:./common/lib_AT91SAM7S64.h **** 	AT91PS_AIC pAic,  // \arg pointer to the AIC registers
  54:./common/lib_AT91SAM7S64.h **** 	unsigned int irq_id,     // \arg interrupt number to initialize
  55:./common/lib_AT91SAM7S64.h **** 	unsigned int priority,   // \arg priority to give to the interrupt
  56:./common/lib_AT91SAM7S64.h **** 	unsigned int src_type,   // \arg activation and sense of activation
  57:./common/lib_AT91SAM7S64.h **** 	void (*newHandler) () ) // \arg address of the interrupt handler
  58:./common/lib_AT91SAM7S64.h **** {
  59:./common/lib_AT91SAM7S64.h **** 	unsigned int oldHandler;
  60:./common/lib_AT91SAM7S64.h ****     unsigned int mask ;
  61:./common/lib_AT91SAM7S64.h **** 
  62:./common/lib_AT91SAM7S64.h ****     oldHandler = pAic->AIC_SVR[irq_id];
  63:./common/lib_AT91SAM7S64.h **** 
  64:./common/lib_AT91SAM7S64.h ****     mask = 0x1 << irq_id ;
  65:./common/lib_AT91SAM7S64.h ****     //* Disable the interrupt on the interrupt controller
  66:./common/lib_AT91SAM7S64.h ****     pAic->AIC_IDCR = mask ;
  67:./common/lib_AT91SAM7S64.h ****     //* Save the interrupt handler routine pointer and the interrupt priority
  68:./common/lib_AT91SAM7S64.h ****     pAic->AIC_SVR[irq_id] = (unsigned int) newHandler ;
  69:./common/lib_AT91SAM7S64.h ****     //* Store the Source Mode Register
  70:./common/lib_AT91SAM7S64.h ****     pAic->AIC_SMR[irq_id] = src_type | priority  ;
  71:./common/lib_AT91SAM7S64.h ****     //* Clear the interrupt on the interrupt controller
  72:./common/lib_AT91SAM7S64.h ****     pAic->AIC_ICCR = mask ;
  73:./common/lib_AT91SAM7S64.h **** 
  74:./common/lib_AT91SAM7S64.h **** 	return oldHandler;
  75:./common/lib_AT91SAM7S64.h **** }
  76:./common/lib_AT91SAM7S64.h **** 
  77:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
  78:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_AIC_EnableIt
  79:./common/lib_AT91SAM7S64.h **** //* \brief Enable corresponding IT number
  80:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
  81:./common/lib_AT91SAM7S64.h **** __inline void AT91F_AIC_EnableIt (
  82:./common/lib_AT91SAM7S64.h **** 	AT91PS_AIC pAic,      // \arg pointer to the AIC registers
  83:./common/lib_AT91SAM7S64.h **** 	unsigned int irq_id ) // \arg interrupt number to initialize
  84:./common/lib_AT91SAM7S64.h **** {
  85:./common/lib_AT91SAM7S64.h ****     //* Enable the interrupt on the interrupt controller
  86:./common/lib_AT91SAM7S64.h ****     pAic->AIC_IECR = 0x1 << irq_id ;
  87:./common/lib_AT91SAM7S64.h **** }
  88:./common/lib_AT91SAM7S64.h **** 
  89:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
  90:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_AIC_DisableIt
  91:./common/lib_AT91SAM7S64.h **** //* \brief Disable corresponding IT number
  92:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
  93:./common/lib_AT91SAM7S64.h **** __inline void AT91F_AIC_DisableIt (
  94:./common/lib_AT91SAM7S64.h **** 	AT91PS_AIC pAic,      // \arg pointer to the AIC registers
  95:./common/lib_AT91SAM7S64.h **** 	unsigned int irq_id ) // \arg interrupt number to initialize
  96:./common/lib_AT91SAM7S64.h **** {
  97:./common/lib_AT91SAM7S64.h ****     unsigned int mask = 0x1 << irq_id;
  98:./common/lib_AT91SAM7S64.h ****     //* Disable the interrupt on the interrupt controller
  99:./common/lib_AT91SAM7S64.h ****     pAic->AIC_IDCR = mask ;
 100:./common/lib_AT91SAM7S64.h ****     //* Clear the interrupt on the Interrupt Controller ( if one is pending )
 101:./common/lib_AT91SAM7S64.h ****     pAic->AIC_ICCR = mask ;
 102:./common/lib_AT91SAM7S64.h **** }
 103:./common/lib_AT91SAM7S64.h **** 
 104:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 105:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_AIC_ClearIt
 106:./common/lib_AT91SAM7S64.h **** //* \brief Clear corresponding IT number
 107:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 108:./common/lib_AT91SAM7S64.h **** __inline void AT91F_AIC_ClearIt (
 109:./common/lib_AT91SAM7S64.h **** 	AT91PS_AIC pAic,     // \arg pointer to the AIC registers
 110:./common/lib_AT91SAM7S64.h **** 	unsigned int irq_id) // \arg interrupt number to initialize
 111:./common/lib_AT91SAM7S64.h **** {
 112:./common/lib_AT91SAM7S64.h ****     //* Clear the interrupt on the Interrupt Controller ( if one is pending )
 113:./common/lib_AT91SAM7S64.h ****     pAic->AIC_ICCR = (0x1 << irq_id);
 114:./common/lib_AT91SAM7S64.h **** }
 115:./common/lib_AT91SAM7S64.h **** 
 116:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 117:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_AIC_AcknowledgeIt
 118:./common/lib_AT91SAM7S64.h **** //* \brief Acknowledge corresponding IT number
 119:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 120:./common/lib_AT91SAM7S64.h **** __inline void AT91F_AIC_AcknowledgeIt (
 121:./common/lib_AT91SAM7S64.h **** 	AT91PS_AIC pAic)     // \arg pointer to the AIC registers
 122:./common/lib_AT91SAM7S64.h **** {
 123:./common/lib_AT91SAM7S64.h ****     pAic->AIC_EOICR = pAic->AIC_EOICR;
 124:./common/lib_AT91SAM7S64.h **** }
 125:./common/lib_AT91SAM7S64.h **** 
 126:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 127:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_AIC_SetExceptionVector
 128:./common/lib_AT91SAM7S64.h **** //* \brief Configure vector handler
 129:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 130:./common/lib_AT91SAM7S64.h **** __inline unsigned int  AT91F_AIC_SetExceptionVector (
 131:./common/lib_AT91SAM7S64.h **** 	unsigned int *pVector, // \arg pointer to the AIC registers
 132:./common/lib_AT91SAM7S64.h **** 	void (*Handler) () )   // \arg Interrupt Handler
 133:./common/lib_AT91SAM7S64.h **** {
 134:./common/lib_AT91SAM7S64.h **** 	unsigned int oldVector = *pVector;
 135:./common/lib_AT91SAM7S64.h **** 
 136:./common/lib_AT91SAM7S64.h **** 	if ((unsigned int) Handler == (unsigned int) AT91C_AIC_BRANCH_OPCODE)
 137:./common/lib_AT91SAM7S64.h **** 		*pVector = (unsigned int) AT91C_AIC_BRANCH_OPCODE;
 138:./common/lib_AT91SAM7S64.h **** 	else
 139:./common/lib_AT91SAM7S64.h **** 		*pVector = (((((unsigned int) Handler) - ((unsigned int) pVector) - 0x8) >> 2) & 0x00FFFFFF) | 0x
 140:./common/lib_AT91SAM7S64.h **** 
 141:./common/lib_AT91SAM7S64.h **** 	return oldVector;
 142:./common/lib_AT91SAM7S64.h **** }
 143:./common/lib_AT91SAM7S64.h **** 
 144:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 145:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_AIC_Trig
 146:./common/lib_AT91SAM7S64.h **** //* \brief Trig an IT
 147:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 148:./common/lib_AT91SAM7S64.h **** __inline void  AT91F_AIC_Trig (
 149:./common/lib_AT91SAM7S64.h **** 	AT91PS_AIC pAic,     // \arg pointer to the AIC registers
 150:./common/lib_AT91SAM7S64.h **** 	unsigned int irq_id) // \arg interrupt number
 151:./common/lib_AT91SAM7S64.h **** {
 152:./common/lib_AT91SAM7S64.h **** 	pAic->AIC_ISCR = (0x1 << irq_id) ;
 153:./common/lib_AT91SAM7S64.h **** }
 154:./common/lib_AT91SAM7S64.h **** 
 155:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 156:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_AIC_IsActive
 157:./common/lib_AT91SAM7S64.h **** //* \brief Test if an IT is active
 158:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 159:./common/lib_AT91SAM7S64.h **** __inline unsigned int  AT91F_AIC_IsActive (
 160:./common/lib_AT91SAM7S64.h **** 	AT91PS_AIC pAic,     // \arg pointer to the AIC registers
 161:./common/lib_AT91SAM7S64.h **** 	unsigned int irq_id) // \arg Interrupt Number
 162:./common/lib_AT91SAM7S64.h **** {
 163:./common/lib_AT91SAM7S64.h **** 	return (pAic->AIC_ISR & (0x1 << irq_id));
 164:./common/lib_AT91SAM7S64.h **** }
 165:./common/lib_AT91SAM7S64.h **** 
 166:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 167:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_AIC_IsPending
 168:./common/lib_AT91SAM7S64.h **** //* \brief Test if an IT is pending
 169:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 170:./common/lib_AT91SAM7S64.h **** __inline unsigned int  AT91F_AIC_IsPending (
 171:./common/lib_AT91SAM7S64.h **** 	AT91PS_AIC pAic,     // \arg pointer to the AIC registers
 172:./common/lib_AT91SAM7S64.h **** 	unsigned int irq_id) // \arg Interrupt Number
 173:./common/lib_AT91SAM7S64.h **** {
 174:./common/lib_AT91SAM7S64.h **** 	return (pAic->AIC_IPR & (0x1 << irq_id));
 175:./common/lib_AT91SAM7S64.h **** }
 176:./common/lib_AT91SAM7S64.h **** 
 177:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 178:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_AIC_Open
 179:./common/lib_AT91SAM7S64.h **** //* \brief Set exception vectors and AIC registers to default values
 180:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 181:./common/lib_AT91SAM7S64.h **** __inline void AT91F_AIC_Open(
 182:./common/lib_AT91SAM7S64.h **** 	AT91PS_AIC pAic,        // \arg pointer to the AIC registers
 183:./common/lib_AT91SAM7S64.h **** 	void (*IrqHandler) (),  // \arg Default IRQ vector exception
 184:./common/lib_AT91SAM7S64.h **** 	void (*FiqHandler) (),  // \arg Default FIQ vector exception
 185:./common/lib_AT91SAM7S64.h **** 	void (*DefaultHandler)  (), // \arg Default Handler set in ISR
 186:./common/lib_AT91SAM7S64.h **** 	void (*SpuriousHandler) (), // \arg Default Spurious Handler
 187:./common/lib_AT91SAM7S64.h **** 	unsigned int protectMode)   // \arg Debug Control Register
 188:./common/lib_AT91SAM7S64.h **** {
 189:./common/lib_AT91SAM7S64.h **** 	int i;
 190:./common/lib_AT91SAM7S64.h **** 
 191:./common/lib_AT91SAM7S64.h **** 	// Disable all interrupts and set IVR to the default handler
 192:./common/lib_AT91SAM7S64.h **** 	for (i = 0; i < 32; ++i) {
 193:./common/lib_AT91SAM7S64.h **** 		AT91F_AIC_DisableIt(pAic, i);
 194:./common/lib_AT91SAM7S64.h **** 		AT91F_AIC_ConfigureIt(pAic, i, AT91C_AIC_PRIOR_LOWEST, AT91C_AIC_SRCTYPE_HIGH_LEVEL, DefaultHandl
 195:./common/lib_AT91SAM7S64.h **** 	}
 196:./common/lib_AT91SAM7S64.h **** 
 197:./common/lib_AT91SAM7S64.h **** 	// Set the IRQ exception vector
 198:./common/lib_AT91SAM7S64.h **** 	AT91F_AIC_SetExceptionVector((unsigned int *) 0x18, IrqHandler);
 199:./common/lib_AT91SAM7S64.h **** 	// Set the Fast Interrupt exception vector
 200:./common/lib_AT91SAM7S64.h **** 	AT91F_AIC_SetExceptionVector((unsigned int *) 0x1C, FiqHandler);
 201:./common/lib_AT91SAM7S64.h **** 
 202:./common/lib_AT91SAM7S64.h **** 	pAic->AIC_SPU = (unsigned int) SpuriousHandler;
 203:./common/lib_AT91SAM7S64.h **** 	pAic->AIC_DCR = protectMode;
 204:./common/lib_AT91SAM7S64.h **** }
 205:./common/lib_AT91SAM7S64.h **** /* *****************************************************************************
 206:./common/lib_AT91SAM7S64.h ****                 SOFTWARE API FOR PDC
 207:./common/lib_AT91SAM7S64.h ****    ***************************************************************************** */
 208:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 209:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PDC_SetNextRx
 210:./common/lib_AT91SAM7S64.h **** //* \brief Set the next receive transfer descriptor
 211:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 212:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PDC_SetNextRx (
 213:./common/lib_AT91SAM7S64.h **** 	AT91PS_PDC pPDC,     // \arg pointer to a PDC controller
 214:./common/lib_AT91SAM7S64.h **** 	char *address,       // \arg address to the next bloc to be received
 215:./common/lib_AT91SAM7S64.h **** 	unsigned int bytes)  // \arg number of bytes to be received
 216:./common/lib_AT91SAM7S64.h **** {
 217:./common/lib_AT91SAM7S64.h **** 	pPDC->PDC_RNPR = (unsigned int) address;
 218:./common/lib_AT91SAM7S64.h **** 	pPDC->PDC_RNCR = bytes;
 219:./common/lib_AT91SAM7S64.h **** }
 220:./common/lib_AT91SAM7S64.h **** 
 221:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 222:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PDC_SetNextTx
 223:./common/lib_AT91SAM7S64.h **** //* \brief Set the next transmit transfer descriptor
 224:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 225:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PDC_SetNextTx (
 226:./common/lib_AT91SAM7S64.h **** 	AT91PS_PDC pPDC,       // \arg pointer to a PDC controller
 227:./common/lib_AT91SAM7S64.h **** 	char *address,         // \arg address to the next bloc to be transmitted
 228:./common/lib_AT91SAM7S64.h **** 	unsigned int bytes)    // \arg number of bytes to be transmitted
 229:./common/lib_AT91SAM7S64.h **** {
 230:./common/lib_AT91SAM7S64.h **** 	pPDC->PDC_TNPR = (unsigned int) address;
 231:./common/lib_AT91SAM7S64.h **** 	pPDC->PDC_TNCR = bytes;
 232:./common/lib_AT91SAM7S64.h **** }
 233:./common/lib_AT91SAM7S64.h **** 
 234:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 235:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PDC_SetRx
 236:./common/lib_AT91SAM7S64.h **** //* \brief Set the receive transfer descriptor
 237:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 238:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PDC_SetRx (
 239:./common/lib_AT91SAM7S64.h **** 	AT91PS_PDC pPDC,       // \arg pointer to a PDC controller
 240:./common/lib_AT91SAM7S64.h **** 	char *address,         // \arg address to the next bloc to be received
 241:./common/lib_AT91SAM7S64.h **** 	unsigned int bytes)    // \arg number of bytes to be received
 242:./common/lib_AT91SAM7S64.h **** {
 243:./common/lib_AT91SAM7S64.h **** 	pPDC->PDC_RPR = (unsigned int) address;
 244:./common/lib_AT91SAM7S64.h **** 	pPDC->PDC_RCR = bytes;
 245:./common/lib_AT91SAM7S64.h **** }
 246:./common/lib_AT91SAM7S64.h **** 
 247:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 248:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PDC_SetTx
 249:./common/lib_AT91SAM7S64.h **** //* \brief Set the transmit transfer descriptor
 250:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 251:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PDC_SetTx (
 252:./common/lib_AT91SAM7S64.h **** 	AT91PS_PDC pPDC,       // \arg pointer to a PDC controller
 253:./common/lib_AT91SAM7S64.h **** 	char *address,         // \arg address to the next bloc to be transmitted
 254:./common/lib_AT91SAM7S64.h **** 	unsigned int bytes)    // \arg number of bytes to be transmitted
 255:./common/lib_AT91SAM7S64.h **** {
 256:./common/lib_AT91SAM7S64.h **** 	pPDC->PDC_TPR = (unsigned int) address;
 257:./common/lib_AT91SAM7S64.h **** 	pPDC->PDC_TCR = bytes;
 258:./common/lib_AT91SAM7S64.h **** }
 259:./common/lib_AT91SAM7S64.h **** 
 260:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 261:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PDC_EnableTx
 262:./common/lib_AT91SAM7S64.h **** //* \brief Enable transmit
 263:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 264:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PDC_EnableTx (
 265:./common/lib_AT91SAM7S64.h **** 	AT91PS_PDC pPDC )       // \arg pointer to a PDC controller
 266:./common/lib_AT91SAM7S64.h **** {
 267:./common/lib_AT91SAM7S64.h **** 	pPDC->PDC_PTCR = AT91C_PDC_TXTEN;
 268:./common/lib_AT91SAM7S64.h **** }
 269:./common/lib_AT91SAM7S64.h **** 
 270:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 271:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PDC_EnableRx
 272:./common/lib_AT91SAM7S64.h **** //* \brief Enable receive
 273:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 274:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PDC_EnableRx (
 275:./common/lib_AT91SAM7S64.h **** 	AT91PS_PDC pPDC )       // \arg pointer to a PDC controller
 276:./common/lib_AT91SAM7S64.h **** {
 277:./common/lib_AT91SAM7S64.h **** 	pPDC->PDC_PTCR = AT91C_PDC_RXTEN;
 278:./common/lib_AT91SAM7S64.h **** }
 279:./common/lib_AT91SAM7S64.h **** 
 280:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 281:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PDC_DisableTx
 282:./common/lib_AT91SAM7S64.h **** //* \brief Disable transmit
 283:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 284:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PDC_DisableTx (
 285:./common/lib_AT91SAM7S64.h **** 	AT91PS_PDC pPDC )       // \arg pointer to a PDC controller
 286:./common/lib_AT91SAM7S64.h **** {
 287:./common/lib_AT91SAM7S64.h **** 	pPDC->PDC_PTCR = AT91C_PDC_TXTDIS;
 288:./common/lib_AT91SAM7S64.h **** }
 289:./common/lib_AT91SAM7S64.h **** 
 290:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 291:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PDC_DisableRx
 292:./common/lib_AT91SAM7S64.h **** //* \brief Disable receive
 293:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 294:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PDC_DisableRx (
 295:./common/lib_AT91SAM7S64.h **** 	AT91PS_PDC pPDC )       // \arg pointer to a PDC controller
 296:./common/lib_AT91SAM7S64.h **** {
 297:./common/lib_AT91SAM7S64.h **** 	pPDC->PDC_PTCR = AT91C_PDC_RXTDIS;
 298:./common/lib_AT91SAM7S64.h **** }
 299:./common/lib_AT91SAM7S64.h **** 
 300:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 301:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PDC_IsTxEmpty
 302:./common/lib_AT91SAM7S64.h **** //* \brief Test if the current transfer descriptor has been sent
 303:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 304:./common/lib_AT91SAM7S64.h **** __inline int AT91F_PDC_IsTxEmpty ( // \return return 1 if transfer is complete
 305:./common/lib_AT91SAM7S64.h **** 	AT91PS_PDC pPDC )       // \arg pointer to a PDC controller
 306:./common/lib_AT91SAM7S64.h **** {
 307:./common/lib_AT91SAM7S64.h **** 	return !(pPDC->PDC_TCR);
 308:./common/lib_AT91SAM7S64.h **** }
 309:./common/lib_AT91SAM7S64.h **** 
 310:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 311:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PDC_IsNextTxEmpty
 312:./common/lib_AT91SAM7S64.h **** //* \brief Test if the next transfer descriptor has been moved to the current td
 313:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 314:./common/lib_AT91SAM7S64.h **** __inline int AT91F_PDC_IsNextTxEmpty ( // \return return 1 if transfer is complete
 315:./common/lib_AT91SAM7S64.h **** 	AT91PS_PDC pPDC )       // \arg pointer to a PDC controller
 316:./common/lib_AT91SAM7S64.h **** {
 317:./common/lib_AT91SAM7S64.h **** 	return !(pPDC->PDC_TNCR);
 318:./common/lib_AT91SAM7S64.h **** }
 319:./common/lib_AT91SAM7S64.h **** 
 320:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 321:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PDC_IsRxEmpty
 322:./common/lib_AT91SAM7S64.h **** //* \brief Test if the current transfer descriptor has been filled
 323:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 324:./common/lib_AT91SAM7S64.h **** __inline int AT91F_PDC_IsRxEmpty ( // \return return 1 if transfer is complete
 325:./common/lib_AT91SAM7S64.h **** 	AT91PS_PDC pPDC )       // \arg pointer to a PDC controller
 326:./common/lib_AT91SAM7S64.h **** {
 327:./common/lib_AT91SAM7S64.h **** 	return !(pPDC->PDC_RCR);
 328:./common/lib_AT91SAM7S64.h **** }
 329:./common/lib_AT91SAM7S64.h **** 
 330:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 331:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PDC_IsNextRxEmpty
 332:./common/lib_AT91SAM7S64.h **** //* \brief Test if the next transfer descriptor has been moved to the current td
 333:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 334:./common/lib_AT91SAM7S64.h **** __inline int AT91F_PDC_IsNextRxEmpty ( // \return return 1 if transfer is complete
 335:./common/lib_AT91SAM7S64.h **** 	AT91PS_PDC pPDC )       // \arg pointer to a PDC controller
 336:./common/lib_AT91SAM7S64.h **** {
 337:./common/lib_AT91SAM7S64.h **** 	return !(pPDC->PDC_RNCR);
 338:./common/lib_AT91SAM7S64.h **** }
 339:./common/lib_AT91SAM7S64.h **** 
 340:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 341:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PDC_Open
 342:./common/lib_AT91SAM7S64.h **** //* \brief Open PDC: disable TX and RX reset transfer descriptors, re-enable RX and TX
 343:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 344:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PDC_Open (
 345:./common/lib_AT91SAM7S64.h **** 	AT91PS_PDC pPDC)       // \arg pointer to a PDC controller
 346:./common/lib_AT91SAM7S64.h **** {
 347:./common/lib_AT91SAM7S64.h ****     //* Disable the RX and TX PDC transfer requests
 348:./common/lib_AT91SAM7S64.h **** 	AT91F_PDC_DisableRx(pPDC);
 349:./common/lib_AT91SAM7S64.h **** 	AT91F_PDC_DisableTx(pPDC);
 350:./common/lib_AT91SAM7S64.h **** 
 351:./common/lib_AT91SAM7S64.h **** 	//* Reset all Counter register Next buffer first
 352:./common/lib_AT91SAM7S64.h **** 	AT91F_PDC_SetNextTx(pPDC, (char *) 0, 0);
 353:./common/lib_AT91SAM7S64.h **** 	AT91F_PDC_SetNextRx(pPDC, (char *) 0, 0);
 354:./common/lib_AT91SAM7S64.h **** 	AT91F_PDC_SetTx(pPDC, (char *) 0, 0);
 355:./common/lib_AT91SAM7S64.h **** 	AT91F_PDC_SetRx(pPDC, (char *) 0, 0);
 356:./common/lib_AT91SAM7S64.h **** 
 357:./common/lib_AT91SAM7S64.h ****     //* Enable the RX and TX PDC transfer requests
 358:./common/lib_AT91SAM7S64.h **** 	AT91F_PDC_EnableRx(pPDC);
 359:./common/lib_AT91SAM7S64.h **** 	AT91F_PDC_EnableTx(pPDC);
 360:./common/lib_AT91SAM7S64.h **** }
 361:./common/lib_AT91SAM7S64.h **** 
 362:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 363:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PDC_Close
 364:./common/lib_AT91SAM7S64.h **** //* \brief Close PDC: disable TX and RX reset transfer descriptors
 365:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 366:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PDC_Close (
 367:./common/lib_AT91SAM7S64.h **** 	AT91PS_PDC pPDC)       // \arg pointer to a PDC controller
 368:./common/lib_AT91SAM7S64.h **** {
 369:./common/lib_AT91SAM7S64.h ****     //* Disable the RX and TX PDC transfer requests
 370:./common/lib_AT91SAM7S64.h **** 	AT91F_PDC_DisableRx(pPDC);
 371:./common/lib_AT91SAM7S64.h **** 	AT91F_PDC_DisableTx(pPDC);
 372:./common/lib_AT91SAM7S64.h **** 
 373:./common/lib_AT91SAM7S64.h **** 	//* Reset all Counter register Next buffer first
 374:./common/lib_AT91SAM7S64.h **** 	AT91F_PDC_SetNextTx(pPDC, (char *) 0, 0);
 375:./common/lib_AT91SAM7S64.h **** 	AT91F_PDC_SetNextRx(pPDC, (char *) 0, 0);
 376:./common/lib_AT91SAM7S64.h **** 	AT91F_PDC_SetTx(pPDC, (char *) 0, 0);
 377:./common/lib_AT91SAM7S64.h **** 	AT91F_PDC_SetRx(pPDC, (char *) 0, 0);
 378:./common/lib_AT91SAM7S64.h **** 
 379:./common/lib_AT91SAM7S64.h **** }
 380:./common/lib_AT91SAM7S64.h **** 
 381:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 382:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PDC_SendFrame
 383:./common/lib_AT91SAM7S64.h **** //* \brief Close PDC: disable TX and RX reset transfer descriptors
 384:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 385:./common/lib_AT91SAM7S64.h **** __inline unsigned int AT91F_PDC_SendFrame(
 386:./common/lib_AT91SAM7S64.h **** 	AT91PS_PDC pPDC,
 387:./common/lib_AT91SAM7S64.h **** 	char *pBuffer,
 388:./common/lib_AT91SAM7S64.h **** 	unsigned int szBuffer,
 389:./common/lib_AT91SAM7S64.h **** 	char *pNextBuffer,
 390:./common/lib_AT91SAM7S64.h **** 	unsigned int szNextBuffer )
 391:./common/lib_AT91SAM7S64.h **** {
 392:./common/lib_AT91SAM7S64.h **** 	if (AT91F_PDC_IsTxEmpty(pPDC)) {
 393:./common/lib_AT91SAM7S64.h **** 		//* Buffer and next buffer can be initialized
 394:./common/lib_AT91SAM7S64.h **** 		AT91F_PDC_SetTx(pPDC, pBuffer, szBuffer);
 395:./common/lib_AT91SAM7S64.h **** 		AT91F_PDC_SetNextTx(pPDC, pNextBuffer, szNextBuffer);
 396:./common/lib_AT91SAM7S64.h **** 		return 2;
 397:./common/lib_AT91SAM7S64.h **** 	}
 398:./common/lib_AT91SAM7S64.h **** 	else if (AT91F_PDC_IsNextTxEmpty(pPDC)) {
 399:./common/lib_AT91SAM7S64.h **** 		//* Only one buffer can be initialized
 400:./common/lib_AT91SAM7S64.h **** 		AT91F_PDC_SetNextTx(pPDC, pBuffer, szBuffer);
 401:./common/lib_AT91SAM7S64.h **** 		return 1;
 402:./common/lib_AT91SAM7S64.h **** 	}
 403:./common/lib_AT91SAM7S64.h **** 	else {
 404:./common/lib_AT91SAM7S64.h **** 		//* All buffer are in use...
 405:./common/lib_AT91SAM7S64.h **** 		return 0;
 406:./common/lib_AT91SAM7S64.h **** 	}
 407:./common/lib_AT91SAM7S64.h **** }
 408:./common/lib_AT91SAM7S64.h **** 
 409:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 410:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PDC_ReceiveFrame
 411:./common/lib_AT91SAM7S64.h **** //* \brief Close PDC: disable TX and RX reset transfer descriptors
 412:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 413:./common/lib_AT91SAM7S64.h **** __inline unsigned int AT91F_PDC_ReceiveFrame (
 414:./common/lib_AT91SAM7S64.h **** 	AT91PS_PDC pPDC,
 415:./common/lib_AT91SAM7S64.h **** 	char *pBuffer,
 416:./common/lib_AT91SAM7S64.h **** 	unsigned int szBuffer,
 417:./common/lib_AT91SAM7S64.h **** 	char *pNextBuffer,
 418:./common/lib_AT91SAM7S64.h **** 	unsigned int szNextBuffer )
 419:./common/lib_AT91SAM7S64.h **** {
 420:./common/lib_AT91SAM7S64.h **** 	if (AT91F_PDC_IsRxEmpty(pPDC)) {
 421:./common/lib_AT91SAM7S64.h **** 		//* Buffer and next buffer can be initialized
 422:./common/lib_AT91SAM7S64.h **** 		AT91F_PDC_SetRx(pPDC, pBuffer, szBuffer);
 423:./common/lib_AT91SAM7S64.h **** 		AT91F_PDC_SetNextRx(pPDC, pNextBuffer, szNextBuffer);
 424:./common/lib_AT91SAM7S64.h **** 		return 2;
 425:./common/lib_AT91SAM7S64.h **** 	}
 426:./common/lib_AT91SAM7S64.h **** 	else if (AT91F_PDC_IsNextRxEmpty(pPDC)) {
 427:./common/lib_AT91SAM7S64.h **** 		//* Only one buffer can be initialized
 428:./common/lib_AT91SAM7S64.h **** 		AT91F_PDC_SetNextRx(pPDC, pBuffer, szBuffer);
 429:./common/lib_AT91SAM7S64.h **** 		return 1;
 430:./common/lib_AT91SAM7S64.h **** 	}
 431:./common/lib_AT91SAM7S64.h **** 	else {
 432:./common/lib_AT91SAM7S64.h **** 		//* All buffer are in use...
 433:./common/lib_AT91SAM7S64.h **** 		return 0;
 434:./common/lib_AT91SAM7S64.h **** 	}
 435:./common/lib_AT91SAM7S64.h **** }
 436:./common/lib_AT91SAM7S64.h **** /* *****************************************************************************
 437:./common/lib_AT91SAM7S64.h ****                 SOFTWARE API FOR DBGU
 438:./common/lib_AT91SAM7S64.h ****    ***************************************************************************** */
 439:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 440:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_DBGU_InterruptEnable
 441:./common/lib_AT91SAM7S64.h **** //* \brief Enable DBGU Interrupt
 442:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 443:./common/lib_AT91SAM7S64.h **** __inline void AT91F_DBGU_InterruptEnable(
 444:./common/lib_AT91SAM7S64.h ****         AT91PS_DBGU pDbgu,   // \arg  pointer to a DBGU controller
 445:./common/lib_AT91SAM7S64.h ****         unsigned int flag) // \arg  dbgu interrupt to be enabled
 446:./common/lib_AT91SAM7S64.h **** {
 447:./common/lib_AT91SAM7S64.h ****         pDbgu->DBGU_IER = flag;
 448:./common/lib_AT91SAM7S64.h **** }
 449:./common/lib_AT91SAM7S64.h **** 
 450:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 451:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_DBGU_InterruptDisable
 452:./common/lib_AT91SAM7S64.h **** //* \brief Disable DBGU Interrupt
 453:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 454:./common/lib_AT91SAM7S64.h **** __inline void AT91F_DBGU_InterruptDisable(
 455:./common/lib_AT91SAM7S64.h ****         AT91PS_DBGU pDbgu,   // \arg  pointer to a DBGU controller
 456:./common/lib_AT91SAM7S64.h ****         unsigned int flag) // \arg  dbgu interrupt to be disabled
 457:./common/lib_AT91SAM7S64.h **** {
 458:./common/lib_AT91SAM7S64.h ****         pDbgu->DBGU_IDR = flag;
 459:./common/lib_AT91SAM7S64.h **** }
 460:./common/lib_AT91SAM7S64.h **** 
 461:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 462:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_DBGU_GetInterruptMaskStatus
 463:./common/lib_AT91SAM7S64.h **** //* \brief Return DBGU Interrupt Mask Status
 464:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 465:./common/lib_AT91SAM7S64.h **** __inline unsigned int AT91F_DBGU_GetInterruptMaskStatus( // \return DBGU Interrupt Mask Status
 466:./common/lib_AT91SAM7S64.h ****         AT91PS_DBGU pDbgu) // \arg  pointer to a DBGU controller
 467:./common/lib_AT91SAM7S64.h **** {
 468:./common/lib_AT91SAM7S64.h ****         return pDbgu->DBGU_IMR;
 469:./common/lib_AT91SAM7S64.h **** }
 470:./common/lib_AT91SAM7S64.h **** 
 471:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 472:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_DBGU_IsInterruptMasked
 473:./common/lib_AT91SAM7S64.h **** //* \brief Test if DBGU Interrupt is Masked 
 474:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 475:./common/lib_AT91SAM7S64.h **** __inline int AT91F_DBGU_IsInterruptMasked(
 476:./common/lib_AT91SAM7S64.h ****         AT91PS_DBGU pDbgu,   // \arg  pointer to a DBGU controller
 477:./common/lib_AT91SAM7S64.h ****         unsigned int flag) // \arg  flag to be tested
 478:./common/lib_AT91SAM7S64.h **** {
 479:./common/lib_AT91SAM7S64.h ****         return (AT91F_DBGU_GetInterruptMaskStatus(pDbgu) & flag);
 480:./common/lib_AT91SAM7S64.h **** }
 481:./common/lib_AT91SAM7S64.h **** 
 482:./common/lib_AT91SAM7S64.h **** /* *****************************************************************************
 483:./common/lib_AT91SAM7S64.h ****                 SOFTWARE API FOR PIO
 484:./common/lib_AT91SAM7S64.h ****    ***************************************************************************** */
 485:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 486:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_CfgPeriph
 487:./common/lib_AT91SAM7S64.h **** //* \brief Enable pins to be drived by peripheral
 488:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 489:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PIO_CfgPeriph(
 490:./common/lib_AT91SAM7S64.h **** 	AT91PS_PIO pPio,             // \arg pointer to a PIO controller
 491:./common/lib_AT91SAM7S64.h **** 	unsigned int periphAEnable,  // \arg PERIPH A to enable
 492:./common/lib_AT91SAM7S64.h **** 	unsigned int periphBEnable)  // \arg PERIPH B to enable
 493:./common/lib_AT91SAM7S64.h **** 
 494:./common/lib_AT91SAM7S64.h **** {
 495:./common/lib_AT91SAM7S64.h **** 	pPio->PIO_ASR = periphAEnable;
 496:./common/lib_AT91SAM7S64.h **** 	pPio->PIO_BSR = periphBEnable;
 497:./common/lib_AT91SAM7S64.h **** 	pPio->PIO_PDR = (periphAEnable | periphBEnable); // Set in Periph mode
 498:./common/lib_AT91SAM7S64.h **** }
 499:./common/lib_AT91SAM7S64.h **** 
 500:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 501:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_CfgOutput
 502:./common/lib_AT91SAM7S64.h **** //* \brief Enable PIO in output mode
 503:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 504:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PIO_CfgOutput(
 505:./common/lib_AT91SAM7S64.h **** 	AT91PS_PIO pPio,             // \arg pointer to a PIO controller
 506:./common/lib_AT91SAM7S64.h **** 	unsigned int pioEnable)      // \arg PIO to be enabled
 507:./common/lib_AT91SAM7S64.h **** {
 508:./common/lib_AT91SAM7S64.h **** 	pPio->PIO_PER = pioEnable; // Set in PIO mode
 509:./common/lib_AT91SAM7S64.h **** 	pPio->PIO_OER = pioEnable; // Configure in Output
 510:./common/lib_AT91SAM7S64.h **** }
 511:./common/lib_AT91SAM7S64.h **** 
 512:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 513:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_CfgInput
 514:./common/lib_AT91SAM7S64.h **** //* \brief Enable PIO in input mode
 515:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 516:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PIO_CfgInput(
 517:./common/lib_AT91SAM7S64.h **** 	AT91PS_PIO pPio,             // \arg pointer to a PIO controller
 518:./common/lib_AT91SAM7S64.h **** 	unsigned int inputEnable)      // \arg PIO to be enabled
 519:./common/lib_AT91SAM7S64.h **** {
 520:./common/lib_AT91SAM7S64.h **** 	// Disable output
 521:./common/lib_AT91SAM7S64.h **** 	pPio->PIO_ODR  = inputEnable;
 522:./common/lib_AT91SAM7S64.h **** 	pPio->PIO_PER  = inputEnable;
 523:./common/lib_AT91SAM7S64.h **** }
 524:./common/lib_AT91SAM7S64.h **** 
 525:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 526:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_CfgOpendrain
 527:./common/lib_AT91SAM7S64.h **** //* \brief Configure PIO in open drain
 528:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 529:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PIO_CfgOpendrain(
 530:./common/lib_AT91SAM7S64.h **** 	AT91PS_PIO pPio,             // \arg pointer to a PIO controller
 531:./common/lib_AT91SAM7S64.h **** 	unsigned int multiDrvEnable) // \arg pio to be configured in open drain
 532:./common/lib_AT91SAM7S64.h **** {
 533:./common/lib_AT91SAM7S64.h **** 	// Configure the multi-drive option
 534:./common/lib_AT91SAM7S64.h **** 	pPio->PIO_MDDR = ~multiDrvEnable;
 535:./common/lib_AT91SAM7S64.h **** 	pPio->PIO_MDER = multiDrvEnable;
 536:./common/lib_AT91SAM7S64.h **** }
 537:./common/lib_AT91SAM7S64.h **** 
 538:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 539:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_CfgPullup
 540:./common/lib_AT91SAM7S64.h **** //* \brief Enable pullup on PIO
 541:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 542:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PIO_CfgPullup(
 543:./common/lib_AT91SAM7S64.h **** 	AT91PS_PIO pPio,             // \arg pointer to a PIO controller
 544:./common/lib_AT91SAM7S64.h **** 	unsigned int pullupEnable)   // \arg enable pullup on PIO
 545:./common/lib_AT91SAM7S64.h **** {
 546:./common/lib_AT91SAM7S64.h **** 		// Connect or not Pullup
 547:./common/lib_AT91SAM7S64.h **** 	pPio->PIO_PPUDR = ~pullupEnable;
 548:./common/lib_AT91SAM7S64.h **** 	pPio->PIO_PPUER = pullupEnable;
 549:./common/lib_AT91SAM7S64.h **** }
 550:./common/lib_AT91SAM7S64.h **** 
 551:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 552:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_CfgDirectDrive
 553:./common/lib_AT91SAM7S64.h **** //* \brief Enable direct drive on PIO
 554:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 555:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PIO_CfgDirectDrive(
 556:./common/lib_AT91SAM7S64.h **** 	AT91PS_PIO pPio,             // \arg pointer to a PIO controller
 557:./common/lib_AT91SAM7S64.h **** 	unsigned int directDrive)    // \arg PIO to be configured with direct drive
 558:./common/lib_AT91SAM7S64.h **** 
 559:./common/lib_AT91SAM7S64.h **** {
 560:./common/lib_AT91SAM7S64.h **** 	// Configure the Direct Drive
 561:./common/lib_AT91SAM7S64.h **** 	pPio->PIO_OWDR  = ~directDrive;
 562:./common/lib_AT91SAM7S64.h **** 	pPio->PIO_OWER  = directDrive;
 563:./common/lib_AT91SAM7S64.h **** }
 564:./common/lib_AT91SAM7S64.h **** 
 565:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 566:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_CfgInputFilter
 567:./common/lib_AT91SAM7S64.h **** //* \brief Enable input filter on input PIO
 568:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 569:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PIO_CfgInputFilter(
 570:./common/lib_AT91SAM7S64.h **** 	AT91PS_PIO pPio,             // \arg pointer to a PIO controller
 571:./common/lib_AT91SAM7S64.h **** 	unsigned int inputFilter)    // \arg PIO to be configured with input filter
 572:./common/lib_AT91SAM7S64.h **** 
 573:./common/lib_AT91SAM7S64.h **** {
 574:./common/lib_AT91SAM7S64.h **** 	// Configure the Direct Drive
 575:./common/lib_AT91SAM7S64.h **** 	pPio->PIO_IFDR  = ~inputFilter;
 576:./common/lib_AT91SAM7S64.h **** 	pPio->PIO_IFER  = inputFilter;
 577:./common/lib_AT91SAM7S64.h **** }
 578:./common/lib_AT91SAM7S64.h **** 
 579:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 580:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_GetInput
 581:./common/lib_AT91SAM7S64.h **** //* \brief Return PIO input value
 582:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 583:./common/lib_AT91SAM7S64.h **** __inline unsigned int AT91F_PIO_GetInput( // \return PIO input
 584:./common/lib_AT91SAM7S64.h **** 	AT91PS_PIO pPio) // \arg  pointer to a PIO controller
 585:./common/lib_AT91SAM7S64.h **** {
 586:./common/lib_AT91SAM7S64.h **** 	return pPio->PIO_PDSR;
 587:./common/lib_AT91SAM7S64.h **** }
 588:./common/lib_AT91SAM7S64.h **** 
 589:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 590:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_IsInputSet
 591:./common/lib_AT91SAM7S64.h **** //* \brief Test if PIO is input flag is active
 592:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 593:./common/lib_AT91SAM7S64.h **** __inline int AT91F_PIO_IsInputSet(
 594:./common/lib_AT91SAM7S64.h **** 	AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 595:./common/lib_AT91SAM7S64.h **** 	unsigned int flag) // \arg  flag to be tested
 596:./common/lib_AT91SAM7S64.h **** {
 597:./common/lib_AT91SAM7S64.h **** 	return (AT91F_PIO_GetInput(pPio) & flag);
 598:./common/lib_AT91SAM7S64.h **** }
 599:./common/lib_AT91SAM7S64.h **** 
 600:./common/lib_AT91SAM7S64.h **** 
 601:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 602:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_SetOutput
 603:./common/lib_AT91SAM7S64.h **** //* \brief Set to 1 output PIO
 604:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 605:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PIO_SetOutput(
 606:./common/lib_AT91SAM7S64.h **** 	AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 607:./common/lib_AT91SAM7S64.h **** 	unsigned int flag) // \arg  output to be set
 608:./common/lib_AT91SAM7S64.h **** {
 609:./common/lib_AT91SAM7S64.h **** 	pPio->PIO_SODR = flag;
 610:./common/lib_AT91SAM7S64.h **** }
 611:./common/lib_AT91SAM7S64.h **** 
 612:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 613:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_ClearOutput
 614:./common/lib_AT91SAM7S64.h **** //* \brief Set to 0 output PIO
 615:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 616:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PIO_ClearOutput(
 617:./common/lib_AT91SAM7S64.h **** 	AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 618:./common/lib_AT91SAM7S64.h **** 	unsigned int flag) // \arg  output to be cleared
 619:./common/lib_AT91SAM7S64.h **** {
 620:./common/lib_AT91SAM7S64.h **** 	pPio->PIO_CODR = flag;
 621:./common/lib_AT91SAM7S64.h **** }
 622:./common/lib_AT91SAM7S64.h **** 
 623:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 624:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_ForceOutput
 625:./common/lib_AT91SAM7S64.h **** //* \brief Force output when Direct drive option is enabled
 626:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 627:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PIO_ForceOutput(
 628:./common/lib_AT91SAM7S64.h **** 	AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 629:./common/lib_AT91SAM7S64.h **** 	unsigned int flag) // \arg  output to be forced
 630:./common/lib_AT91SAM7S64.h **** {
 631:./common/lib_AT91SAM7S64.h **** 	pPio->PIO_ODSR = flag;
 632:./common/lib_AT91SAM7S64.h **** }
 633:./common/lib_AT91SAM7S64.h **** 
 634:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 635:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_Enable
 636:./common/lib_AT91SAM7S64.h **** //* \brief Enable PIO
 637:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 638:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PIO_Enable(
 639:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 640:./common/lib_AT91SAM7S64.h ****         unsigned int flag) // \arg  pio to be enabled 
 641:./common/lib_AT91SAM7S64.h **** {
 642:./common/lib_AT91SAM7S64.h ****         pPio->PIO_PER = flag;
 643:./common/lib_AT91SAM7S64.h **** }
 644:./common/lib_AT91SAM7S64.h **** 
 645:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 646:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_Disable
 647:./common/lib_AT91SAM7S64.h **** //* \brief Disable PIO
 648:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 649:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PIO_Disable(
 650:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 651:./common/lib_AT91SAM7S64.h ****         unsigned int flag) // \arg  pio to be disabled 
 652:./common/lib_AT91SAM7S64.h **** {
 653:./common/lib_AT91SAM7S64.h ****         pPio->PIO_PDR = flag;
 654:./common/lib_AT91SAM7S64.h **** }
 655:./common/lib_AT91SAM7S64.h **** 
 656:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 657:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_GetStatus
 658:./common/lib_AT91SAM7S64.h **** //* \brief Return PIO Status
 659:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 660:./common/lib_AT91SAM7S64.h **** __inline unsigned int AT91F_PIO_GetStatus( // \return PIO Status
 661:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio) // \arg  pointer to a PIO controller
 662:./common/lib_AT91SAM7S64.h **** {
 663:./common/lib_AT91SAM7S64.h ****         return pPio->PIO_PSR;
 664:./common/lib_AT91SAM7S64.h **** }
 665:./common/lib_AT91SAM7S64.h **** 
 666:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 667:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_IsSet
 668:./common/lib_AT91SAM7S64.h **** //* \brief Test if PIO is Set
 669:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 670:./common/lib_AT91SAM7S64.h **** __inline int AT91F_PIO_IsSet(
 671:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 672:./common/lib_AT91SAM7S64.h ****         unsigned int flag) // \arg  flag to be tested
 673:./common/lib_AT91SAM7S64.h **** {
 674:./common/lib_AT91SAM7S64.h ****         return (AT91F_PIO_GetStatus(pPio) & flag);
 675:./common/lib_AT91SAM7S64.h **** }
 676:./common/lib_AT91SAM7S64.h **** 
 677:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 678:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_OutputEnable
 679:./common/lib_AT91SAM7S64.h **** //* \brief Output Enable PIO
 680:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 681:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PIO_OutputEnable(
 682:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 683:./common/lib_AT91SAM7S64.h ****         unsigned int flag) // \arg  pio output to be enabled
 684:./common/lib_AT91SAM7S64.h **** {
 685:./common/lib_AT91SAM7S64.h ****         pPio->PIO_OER = flag;
 686:./common/lib_AT91SAM7S64.h **** }
 687:./common/lib_AT91SAM7S64.h **** 
 688:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 689:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_OutputDisable
 690:./common/lib_AT91SAM7S64.h **** //* \brief Output Enable PIO
 691:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 692:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PIO_OutputDisable(
 693:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 694:./common/lib_AT91SAM7S64.h ****         unsigned int flag) // \arg  pio output to be disabled
 695:./common/lib_AT91SAM7S64.h **** {
 696:./common/lib_AT91SAM7S64.h ****         pPio->PIO_ODR = flag;
 697:./common/lib_AT91SAM7S64.h **** }
 698:./common/lib_AT91SAM7S64.h **** 
 699:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 700:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_GetOutputStatus
 701:./common/lib_AT91SAM7S64.h **** //* \brief Return PIO Output Status
 702:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 703:./common/lib_AT91SAM7S64.h **** __inline unsigned int AT91F_PIO_GetOutputStatus( // \return PIO Output Status
 704:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio) // \arg  pointer to a PIO controller
 705:./common/lib_AT91SAM7S64.h **** {
 706:./common/lib_AT91SAM7S64.h ****         return pPio->PIO_OSR;
 707:./common/lib_AT91SAM7S64.h **** }
 708:./common/lib_AT91SAM7S64.h **** 
 709:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 710:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_IsOuputSet
 711:./common/lib_AT91SAM7S64.h **** //* \brief Test if PIO Output is Set
 712:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 713:./common/lib_AT91SAM7S64.h **** __inline int AT91F_PIO_IsOutputSet(
 714:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 715:./common/lib_AT91SAM7S64.h ****         unsigned int flag) // \arg  flag to be tested
 716:./common/lib_AT91SAM7S64.h **** {
 717:./common/lib_AT91SAM7S64.h ****         return (AT91F_PIO_GetOutputStatus(pPio) & flag);
 718:./common/lib_AT91SAM7S64.h **** }
 719:./common/lib_AT91SAM7S64.h **** 
 720:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 721:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_InputFilterEnable
 722:./common/lib_AT91SAM7S64.h **** //* \brief Input Filter Enable PIO
 723:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 724:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PIO_InputFilterEnable(
 725:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 726:./common/lib_AT91SAM7S64.h ****         unsigned int flag) // \arg  pio input filter to be enabled
 727:./common/lib_AT91SAM7S64.h **** {
 728:./common/lib_AT91SAM7S64.h ****         pPio->PIO_IFER = flag;
 729:./common/lib_AT91SAM7S64.h **** }
 730:./common/lib_AT91SAM7S64.h **** 
 731:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 732:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_InputFilterDisable
 733:./common/lib_AT91SAM7S64.h **** //* \brief Input Filter Disable PIO
 734:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 735:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PIO_InputFilterDisable(
 736:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 737:./common/lib_AT91SAM7S64.h ****         unsigned int flag) // \arg  pio input filter to be disabled
 738:./common/lib_AT91SAM7S64.h **** {
 739:./common/lib_AT91SAM7S64.h ****         pPio->PIO_IFDR = flag;
 740:./common/lib_AT91SAM7S64.h **** }
 741:./common/lib_AT91SAM7S64.h **** 
 742:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 743:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_GetInputFilterStatus
 744:./common/lib_AT91SAM7S64.h **** //* \brief Return PIO Input Filter Status
 745:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 746:./common/lib_AT91SAM7S64.h **** __inline unsigned int AT91F_PIO_GetInputFilterStatus( // \return PIO Input Filter Status
 747:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio) // \arg  pointer to a PIO controller
 748:./common/lib_AT91SAM7S64.h **** {
 749:./common/lib_AT91SAM7S64.h ****         return pPio->PIO_IFSR;
 750:./common/lib_AT91SAM7S64.h **** }
 751:./common/lib_AT91SAM7S64.h **** 
 752:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 753:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_IsInputFilterSet
 754:./common/lib_AT91SAM7S64.h **** //* \brief Test if PIO Input filter is Set
 755:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 756:./common/lib_AT91SAM7S64.h **** __inline int AT91F_PIO_IsInputFilterSet(
 757:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 758:./common/lib_AT91SAM7S64.h ****         unsigned int flag) // \arg  flag to be tested
 759:./common/lib_AT91SAM7S64.h **** {
 760:./common/lib_AT91SAM7S64.h ****         return (AT91F_PIO_GetInputFilterStatus(pPio) & flag);
 761:./common/lib_AT91SAM7S64.h **** }
 762:./common/lib_AT91SAM7S64.h **** 
 763:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 764:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_GetOutputDataStatus
 765:./common/lib_AT91SAM7S64.h **** //* \brief Return PIO Output Data Status 
 766:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 767:./common/lib_AT91SAM7S64.h **** __inline unsigned int AT91F_PIO_GetOutputDataStatus( // \return PIO Output Data Status 
 768:./common/lib_AT91SAM7S64.h **** 	AT91PS_PIO pPio) // \arg  pointer to a PIO controller
 769:./common/lib_AT91SAM7S64.h **** {
 770:./common/lib_AT91SAM7S64.h ****         return pPio->PIO_ODSR;
 771:./common/lib_AT91SAM7S64.h **** }
 772:./common/lib_AT91SAM7S64.h **** 
 773:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 774:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_InterruptEnable
 775:./common/lib_AT91SAM7S64.h **** //* \brief Enable PIO Interrupt
 776:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 777:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PIO_InterruptEnable(
 778:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 779:./common/lib_AT91SAM7S64.h ****         unsigned int flag) // \arg  pio interrupt to be enabled
 780:./common/lib_AT91SAM7S64.h **** {
 781:./common/lib_AT91SAM7S64.h ****         pPio->PIO_IER = flag;
 782:./common/lib_AT91SAM7S64.h **** }
 783:./common/lib_AT91SAM7S64.h **** 
 784:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 785:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_InterruptDisable
 786:./common/lib_AT91SAM7S64.h **** //* \brief Disable PIO Interrupt
 787:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 788:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PIO_InterruptDisable(
 789:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 790:./common/lib_AT91SAM7S64.h ****         unsigned int flag) // \arg  pio interrupt to be disabled
 791:./common/lib_AT91SAM7S64.h **** {
 792:./common/lib_AT91SAM7S64.h ****         pPio->PIO_IDR = flag;
 793:./common/lib_AT91SAM7S64.h **** }
 794:./common/lib_AT91SAM7S64.h **** 
 795:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 796:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_GetInterruptMaskStatus
 797:./common/lib_AT91SAM7S64.h **** //* \brief Return PIO Interrupt Mask Status
 798:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 799:./common/lib_AT91SAM7S64.h **** __inline unsigned int AT91F_PIO_GetInterruptMaskStatus( // \return PIO Interrupt Mask Status
 800:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio) // \arg  pointer to a PIO controller
 801:./common/lib_AT91SAM7S64.h **** {
 802:./common/lib_AT91SAM7S64.h ****         return pPio->PIO_IMR;
 803:./common/lib_AT91SAM7S64.h **** }
 804:./common/lib_AT91SAM7S64.h **** 
 805:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 806:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_GetInterruptStatus
 807:./common/lib_AT91SAM7S64.h **** //* \brief Return PIO Interrupt Status
 808:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 809:./common/lib_AT91SAM7S64.h **** __inline unsigned int AT91F_PIO_GetInterruptStatus( // \return PIO Interrupt Status
 810:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio) // \arg  pointer to a PIO controller
 811:./common/lib_AT91SAM7S64.h **** {
 812:./common/lib_AT91SAM7S64.h ****         return pPio->PIO_ISR;
 813:./common/lib_AT91SAM7S64.h **** }
 814:./common/lib_AT91SAM7S64.h **** 
 815:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 816:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_IsInterruptMasked
 817:./common/lib_AT91SAM7S64.h **** //* \brief Test if PIO Interrupt is Masked 
 818:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 819:./common/lib_AT91SAM7S64.h **** __inline int AT91F_PIO_IsInterruptMasked(
 820:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 821:./common/lib_AT91SAM7S64.h ****         unsigned int flag) // \arg  flag to be tested
 822:./common/lib_AT91SAM7S64.h **** {
 823:./common/lib_AT91SAM7S64.h ****         return (AT91F_PIO_GetInterruptMaskStatus(pPio) & flag);
 824:./common/lib_AT91SAM7S64.h **** }
 825:./common/lib_AT91SAM7S64.h **** 
 826:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 827:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_IsInterruptSet
 828:./common/lib_AT91SAM7S64.h **** //* \brief Test if PIO Interrupt is Set
 829:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 830:./common/lib_AT91SAM7S64.h **** __inline int AT91F_PIO_IsInterruptSet(
 831:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 832:./common/lib_AT91SAM7S64.h ****         unsigned int flag) // \arg  flag to be tested
 833:./common/lib_AT91SAM7S64.h **** {
 834:./common/lib_AT91SAM7S64.h ****         return (AT91F_PIO_GetInterruptStatus(pPio) & flag);
 835:./common/lib_AT91SAM7S64.h **** }
 836:./common/lib_AT91SAM7S64.h **** 
 837:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 838:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_MultiDriverEnable
 839:./common/lib_AT91SAM7S64.h **** //* \brief Multi Driver Enable PIO
 840:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 841:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PIO_MultiDriverEnable(
 842:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 843:./common/lib_AT91SAM7S64.h ****         unsigned int flag) // \arg  pio to be enabled
 844:./common/lib_AT91SAM7S64.h **** {
 845:./common/lib_AT91SAM7S64.h ****         pPio->PIO_MDER = flag;
 846:./common/lib_AT91SAM7S64.h **** }
 847:./common/lib_AT91SAM7S64.h **** 
 848:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 849:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_MultiDriverDisable
 850:./common/lib_AT91SAM7S64.h **** //* \brief Multi Driver Disable PIO
 851:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 852:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PIO_MultiDriverDisable(
 853:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 854:./common/lib_AT91SAM7S64.h ****         unsigned int flag) // \arg  pio to be disabled
 855:./common/lib_AT91SAM7S64.h **** {
 856:./common/lib_AT91SAM7S64.h ****         pPio->PIO_MDDR = flag;
 857:./common/lib_AT91SAM7S64.h **** }
 858:./common/lib_AT91SAM7S64.h **** 
 859:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 860:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_GetMultiDriverStatus
 861:./common/lib_AT91SAM7S64.h **** //* \brief Return PIO Multi Driver Status
 862:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 863:./common/lib_AT91SAM7S64.h **** __inline unsigned int AT91F_PIO_GetMultiDriverStatus( // \return PIO Multi Driver Status
 864:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio) // \arg  pointer to a PIO controller
 865:./common/lib_AT91SAM7S64.h **** {
 866:./common/lib_AT91SAM7S64.h ****         return pPio->PIO_MDSR;
 867:./common/lib_AT91SAM7S64.h **** }
 868:./common/lib_AT91SAM7S64.h **** 
 869:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 870:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_IsMultiDriverSet
 871:./common/lib_AT91SAM7S64.h **** //* \brief Test if PIO MultiDriver is Set
 872:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 873:./common/lib_AT91SAM7S64.h **** __inline int AT91F_PIO_IsMultiDriverSet(
 874:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 875:./common/lib_AT91SAM7S64.h ****         unsigned int flag) // \arg  flag to be tested
 876:./common/lib_AT91SAM7S64.h **** {
 877:./common/lib_AT91SAM7S64.h ****         return (AT91F_PIO_GetMultiDriverStatus(pPio) & flag);
 878:./common/lib_AT91SAM7S64.h **** }
 879:./common/lib_AT91SAM7S64.h **** 
 880:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 881:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_A_RegisterSelection
 882:./common/lib_AT91SAM7S64.h **** //* \brief PIO A Register Selection 
 883:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 884:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PIO_A_RegisterSelection(
 885:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 886:./common/lib_AT91SAM7S64.h ****         unsigned int flag) // \arg  pio A register selection
 887:./common/lib_AT91SAM7S64.h **** {
 888:./common/lib_AT91SAM7S64.h ****         pPio->PIO_ASR = flag;
 889:./common/lib_AT91SAM7S64.h **** }
 890:./common/lib_AT91SAM7S64.h **** 
 891:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 892:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_B_RegisterSelection
 893:./common/lib_AT91SAM7S64.h **** //* \brief PIO B Register Selection 
 894:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 895:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PIO_B_RegisterSelection(
 896:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 897:./common/lib_AT91SAM7S64.h ****         unsigned int flag) // \arg  pio B register selection 
 898:./common/lib_AT91SAM7S64.h **** {
 899:./common/lib_AT91SAM7S64.h ****         pPio->PIO_BSR = flag;
 900:./common/lib_AT91SAM7S64.h **** }
 901:./common/lib_AT91SAM7S64.h **** 
 902:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 903:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_Get_AB_RegisterStatus
 904:./common/lib_AT91SAM7S64.h **** //* \brief Return PIO Interrupt Status
 905:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 906:./common/lib_AT91SAM7S64.h **** __inline unsigned int AT91F_PIO_Get_AB_RegisterStatus( // \return PIO AB Register Status
 907:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio) // \arg  pointer to a PIO controller
 908:./common/lib_AT91SAM7S64.h **** {
 909:./common/lib_AT91SAM7S64.h ****         return pPio->PIO_ABSR;
 910:./common/lib_AT91SAM7S64.h **** }
 911:./common/lib_AT91SAM7S64.h **** 
 912:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 913:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_IsAB_RegisterSet
 914:./common/lib_AT91SAM7S64.h **** //* \brief Test if PIO AB Register is Set
 915:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 916:./common/lib_AT91SAM7S64.h **** __inline int AT91F_PIO_IsAB_RegisterSet(
 917:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 918:./common/lib_AT91SAM7S64.h ****         unsigned int flag) // \arg  flag to be tested
 919:./common/lib_AT91SAM7S64.h **** {
 920:./common/lib_AT91SAM7S64.h ****         return (AT91F_PIO_Get_AB_RegisterStatus(pPio) & flag);
 921:./common/lib_AT91SAM7S64.h **** }
 922:./common/lib_AT91SAM7S64.h **** 
 923:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 924:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_OutputWriteEnable
 925:./common/lib_AT91SAM7S64.h **** //* \brief Output Write Enable PIO
 926:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 927:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PIO_OutputWriteEnable(
 928:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 929:./common/lib_AT91SAM7S64.h ****         unsigned int flag) // \arg  pio output write to be enabled
 930:./common/lib_AT91SAM7S64.h **** {
 931:./common/lib_AT91SAM7S64.h ****         pPio->PIO_OWER = flag;
 932:./common/lib_AT91SAM7S64.h **** }
 933:./common/lib_AT91SAM7S64.h **** 
 934:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 935:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_OutputWriteDisable
 936:./common/lib_AT91SAM7S64.h **** //* \brief Output Write Disable PIO
 937:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 938:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PIO_OutputWriteDisable(
 939:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 940:./common/lib_AT91SAM7S64.h ****         unsigned int flag) // \arg  pio output write to be disabled
 941:./common/lib_AT91SAM7S64.h **** {
 942:./common/lib_AT91SAM7S64.h ****         pPio->PIO_OWDR = flag;
 943:./common/lib_AT91SAM7S64.h **** }
 944:./common/lib_AT91SAM7S64.h **** 
 945:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 946:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_GetOutputWriteStatus
 947:./common/lib_AT91SAM7S64.h **** //* \brief Return PIO Output Write Status
 948:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 949:./common/lib_AT91SAM7S64.h **** __inline unsigned int AT91F_PIO_GetOutputWriteStatus( // \return PIO Output Write Status
 950:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio) // \arg  pointer to a PIO controller
 951:./common/lib_AT91SAM7S64.h **** {
 952:./common/lib_AT91SAM7S64.h ****         return pPio->PIO_OWSR;
 953:./common/lib_AT91SAM7S64.h **** }
 954:./common/lib_AT91SAM7S64.h **** 
 955:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 956:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_IsOutputWriteSet
 957:./common/lib_AT91SAM7S64.h **** //* \brief Test if PIO OutputWrite is Set
 958:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 959:./common/lib_AT91SAM7S64.h **** __inline int AT91F_PIO_IsOutputWriteSet(
 960:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 961:./common/lib_AT91SAM7S64.h ****         unsigned int flag) // \arg  flag to be tested
 962:./common/lib_AT91SAM7S64.h **** {
 963:./common/lib_AT91SAM7S64.h ****         return (AT91F_PIO_GetOutputWriteStatus(pPio) & flag);
 964:./common/lib_AT91SAM7S64.h **** }
 965:./common/lib_AT91SAM7S64.h **** 
 966:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 967:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_GetCfgPullup
 968:./common/lib_AT91SAM7S64.h **** //* \brief Return PIO Configuration Pullup
 969:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 970:./common/lib_AT91SAM7S64.h **** __inline unsigned int AT91F_PIO_GetCfgPullup( // \return PIO Configuration Pullup 
 971:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio) // \arg  pointer to a PIO controller
 972:./common/lib_AT91SAM7S64.h **** {
 973:./common/lib_AT91SAM7S64.h ****         return pPio->PIO_PPUSR;
 974:./common/lib_AT91SAM7S64.h **** }
 975:./common/lib_AT91SAM7S64.h **** 
 976:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 977:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_IsOutputDataStatusSet
 978:./common/lib_AT91SAM7S64.h **** //* \brief Test if PIO Output Data Status is Set 
 979:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 980:./common/lib_AT91SAM7S64.h **** __inline int AT91F_PIO_IsOutputDataStatusSet(
 981:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 982:./common/lib_AT91SAM7S64.h ****         unsigned int flag) // \arg  flag to be tested
 983:./common/lib_AT91SAM7S64.h **** {
 984:./common/lib_AT91SAM7S64.h ****         return (AT91F_PIO_GetOutputDataStatus(pPio) & flag);
 985:./common/lib_AT91SAM7S64.h **** }
 986:./common/lib_AT91SAM7S64.h **** 
 987:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 988:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PIO_IsCfgPullupStatusSet
 989:./common/lib_AT91SAM7S64.h **** //* \brief Test if PIO Configuration Pullup Status is Set
 990:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
 991:./common/lib_AT91SAM7S64.h **** __inline int AT91F_PIO_IsCfgPullupStatusSet(
 992:./common/lib_AT91SAM7S64.h ****         AT91PS_PIO pPio,   // \arg  pointer to a PIO controller
 993:./common/lib_AT91SAM7S64.h ****         unsigned int flag) // \arg  flag to be tested
 994:./common/lib_AT91SAM7S64.h **** {
 995:./common/lib_AT91SAM7S64.h ****         return (~AT91F_PIO_GetCfgPullup(pPio) & flag);
 996:./common/lib_AT91SAM7S64.h **** }
 997:./common/lib_AT91SAM7S64.h **** 
 998:./common/lib_AT91SAM7S64.h **** /* *****************************************************************************
 999:./common/lib_AT91SAM7S64.h ****                 SOFTWARE API FOR PMC
1000:./common/lib_AT91SAM7S64.h ****    ***************************************************************************** */
1001:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
1002:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PMC_CfgSysClkEnableReg
1003:./common/lib_AT91SAM7S64.h **** //* \brief Configure the System Clock Enable Register of the PMC controller
1004:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
1005:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PMC_CfgSysClkEnableReg (
1006:./common/lib_AT91SAM7S64.h **** 	AT91PS_PMC pPMC, // \arg pointer to PMC controller
1007:./common/lib_AT91SAM7S64.h **** 	unsigned int mode)
1008:./common/lib_AT91SAM7S64.h **** {
1009:./common/lib_AT91SAM7S64.h **** 	//* Write to the SCER register
1010:./common/lib_AT91SAM7S64.h **** 	pPMC->PMC_SCER = mode;
1011:./common/lib_AT91SAM7S64.h **** }
1012:./common/lib_AT91SAM7S64.h **** 
1013:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
1014:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PMC_CfgSysClkDisableReg
1015:./common/lib_AT91SAM7S64.h **** //* \brief Configure the System Clock Disable Register of the PMC controller
1016:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
1017:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PMC_CfgSysClkDisableReg (
1018:./common/lib_AT91SAM7S64.h **** 	AT91PS_PMC pPMC, // \arg pointer to PMC controller
1019:./common/lib_AT91SAM7S64.h **** 	unsigned int mode)
1020:./common/lib_AT91SAM7S64.h **** {
1021:./common/lib_AT91SAM7S64.h **** 	//* Write to the SCDR register
1022:./common/lib_AT91SAM7S64.h **** 	pPMC->PMC_SCDR = mode;
1023:./common/lib_AT91SAM7S64.h **** }
1024:./common/lib_AT91SAM7S64.h **** 
1025:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
1026:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PMC_GetSysClkStatusReg
1027:./common/lib_AT91SAM7S64.h **** //* \brief Return the System Clock Status Register of the PMC controller
1028:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
1029:./common/lib_AT91SAM7S64.h **** __inline unsigned int AT91F_PMC_GetSysClkStatusReg (
1030:./common/lib_AT91SAM7S64.h **** 	AT91PS_PMC pPMC // pointer to a CAN controller
1031:./common/lib_AT91SAM7S64.h **** 	)
1032:./common/lib_AT91SAM7S64.h **** {
1033:./common/lib_AT91SAM7S64.h **** 	return pPMC->PMC_SCSR;
1034:./common/lib_AT91SAM7S64.h **** }
1035:./common/lib_AT91SAM7S64.h **** 
1036:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
1037:./common/lib_AT91SAM7S64.h **** //* \fn    AT91F_PMC_EnablePeriphClock
1038:./common/lib_AT91SAM7S64.h **** //* \brief Enable peripheral clock
1039:./common/lib_AT91SAM7S64.h **** //*----------------------------------------------------------------------------
1040:./common/lib_AT91SAM7S64.h **** __inline void AT91F_PMC_EnablePeriphClock (
1041:./common/lib_AT91SAM7S64.h **** 	AT91PS_PMC pPMC, // \arg pointer to PMC controller
1042:./common/lib_AT91SAM7S64.h **** 	unsigned int periphIds)  // \arg IDs of peripherals
1043:./common/lib_AT91SAM7S64.h **** {
1044:./common/lib_AT91SAM7S64.h **** 	pPMC->PMC_PCER = periphIds;
  35              		.loc 2 1044 0
  36 0008 124B     		ldr	r3, .L4+8
  37 000a 0422     		mov	r2, #4
  38 000c 1A61     		str	r2, [r3, #16]
  39              	.LBE23:
  40              	.LBE22:
  41              	.LBB24:
  42              	.LBB25:
  43              		.loc 2 508 0
  44 000e 124A     		ldr	r2, .L4+12
  45 0010 8023     		mov	r3, #128
  46 0012 DB02     		lsl	r3, r3, #11
  47 0014 1360     		str	r3, [r2]
  48              		.loc 2 509 0
  49 0016 1361     		str	r3, [r2, #16]
  50              	.LBE25:
  51              	.LBE24:
  52              	.LBB26:
  53              	.LBB27:
  54              		.loc 2 609 0
  55 0018 1363     		str	r3, [r2, #48]
  56              	.LBE27:
  57              	.LBE26:
  58              	.LBB28:
  59              	.LBB29:
  60              		.loc 2 521 0
  61 001a 8023     		mov	r3, #128
  62 001c 1B03     		lsl	r3, r3, #12
  63 001e 5361     		str	r3, [r2, #20]
  64              		.loc 2 522 0
  65 0020 1360     		str	r3, [r2]
  66              	.LBE29:
  67              	.LBE28:
  68              	.LBB30:
  69              	.LBB31:
  70              	.LBB32:
  71              		.loc 2 62 0
  72 0022 0E4A     		ldr	r2, .L4+16
  73              		.loc 2 66 0
  74 0024 0E48     		ldr	r0, .L4+20
  75              		.loc 2 62 0
  76 0026 D36F     		ldr	r3, [r2, #124]
  77              	.LVL0:
  78              		.loc 2 68 0
  79 0028 0E4B     		ldr	r3, .L4+24
  80              	.LVL1:
  81              		.loc 2 66 0
  82 002a 0221     		mov	r1, #2
  83 002c 8162     		str	r1, [r0, #40]
  84              		.loc 2 68 0
  85 002e D367     		str	r3, [r2, #124]
  86              		.loc 2 70 0
  87 0030 0D4B     		ldr	r3, .L4+28
  88 0032 2022     		mov	r2, #32
  89 0034 5A60     		str	r2, [r3, #4]
  90              	.LBE32:
  91              	.LBE31:
  92              	.LBE30:
  93              		.loc 1 64 0
  94 0036 0D4A     		ldr	r2, .L4+32
  95 0038 0D4B     		ldr	r3, .L4+36
  96              	.LBB33:
  97              	.LBB34:
  98              	.LBB35:
  99              		.loc 2 72 0
 100 003a C162     		str	r1, [r0, #44]
 101              	.LBE35:
 102              	.LBE34:
 103              	.LBE33:
 104              		.loc 1 64 0
 105 003c 1A60     		str	r2, [r3]
 106              	.LBB36:
 107              	.LBB37:
 108              		.loc 2 86 0
 109 003e 4162     		str	r1, [r0, #36]
 110              	.LBE37:
 111              	.LBE36:
 112              		.loc 1 68 0
 113 0040 FFF7FEFF 		bl	AT91F_DBGU_Init
 114              	.LBE21:
 115              	.LBE20:
 116              	.LBB38:
 117              	.LBB39:
 118              	.LBB40:
 119              		.file 3 "./common/swi.h"
   1:./common/swi.h **** /* done by Martin Thomas */
   2:./common/swi.h **** 
   3:./common/swi.h **** /* This needs more testing... */
   4:./common/swi.h **** 
   5:./common/swi.h **** #ifndef SWI_H_
   6:./common/swi.h **** #define SWI_H_
   7:./common/swi.h **** 
   8:./common/swi.h **** #ifdef __cplusplus
   9:./common/swi.h **** extern "C" {
  10:./common/swi.h **** #endif
  11:./common/swi.h **** 
  12:./common/swi.h **** #include "swi_numbers.h"
  13:./common/swi.h **** 
  14:./common/swi.h **** 
  15:./common/swi.h **** /* 
  16:./common/swi.h ****    It seems that "I" ((const int)swi_num) does not work with optimization disabled (-O0)
  17:./common/swi.h ****    so far I have no fix or workaround for this. To keep the code as portable as possible
  18:./common/swi.h ****    do_SWI is not available by default. uncomment the following define to enable do_swi 
  19:./common/swi.h **** */
  20:./common/swi.h **** 
  21:./common/swi.h **** // #define DO_SWI_AVAIL
  22:./common/swi.h **** 
  23:./common/swi.h **** #ifdef DO_SWI_AVAIL
  24:./common/swi.h **** static inline unsigned long do_SWI( const int swi_num, 
  25:./common/swi.h **** 	unsigned long par0,
  26:./common/swi.h **** 	unsigned long par1,
  27:./common/swi.h **** 	unsigned long par2,
  28:./common/swi.h **** 	unsigned long par3 )
  29:./common/swi.h **** {
  30:./common/swi.h **** 	unsigned long ret_val;
  31:./common/swi.h **** 
  32:./common/swi.h **** 	asm volatile (
  33:./common/swi.h **** 		"mov r0, %2 \n\t" \
  34:./common/swi.h **** 		"mov r1, %3 \n\t" \
  35:./common/swi.h **** 		"mov r2, %4 \n\t" \
  36:./common/swi.h **** 		"mov r3, %5 \n\t" \
  37:./common/swi.h **** 		"swi %a1    \n\t" \
  38:./common/swi.h **** 		"mov %0, r0 \n\t" \
  39:./common/swi.h **** 		:	"=r" (ret_val)
  40:./common/swi.h **** 		:	"I" ((const int)swi_num), 
  41:./common/swi.h **** 			"r" (par0), "r" (par1), "r" (par2), "r" (par3)
  42:./common/swi.h **** 		:	"r0", "r1", "r2", "r3", "ip", "lr", "memory", "cc"
  43:./common/swi.h **** 	);
  44:./common/swi.h **** 
  45:./common/swi.h **** 	return ret_val;
  46:./common/swi.h **** }
  47:./common/swi.h **** #endif
  48:./common/swi.h **** 
  49:./common/swi.h **** 
  50:./common/swi.h **** #define SWI_CALL(MY_SWI_ID) \
  51:./common/swi.h **** 	asm volatile( \
  52:./common/swi.h **** 	"swi %a0     \n\t" \
  53:./common/swi.h **** 	: : "I" (MY_SWI_ID) : "lr" )
  54:./common/swi.h **** 
  55:./common/swi.h **** #define MY_SWI_CALL_RES(MY_SWI_ID, MY_RESULT) \
  56:./common/swi.h **** 	asm volatile( \
  57:./common/swi.h **** 	"swi %a1     \n\t" \
  58:./common/swi.h **** 	"mov %0,r0  \n\t" \
  59:./common/swi.h **** 	: "=r" (MY_RESULT) : "I" (MY_SWI_ID) : "r0", "lr" )
  60:./common/swi.h **** 
  61:./common/swi.h **** #define MY_SWI_CALL_PARAM(MY_SWI_ID, MY_PARAM, MY_RESULT) \
  62:./common/swi.h **** 	asm volatile( \
  63:./common/swi.h **** 	"mov r0,%1  \t\n" \
  64:./common/swi.h **** 	"swi %a2     \n\t" \
  65:./common/swi.h **** 	"mov %0,r0  \n\t" \
  66:./common/swi.h **** 	: "=r" (MY_RESULT) : "r" (MY_PARAM), "I" (MY_SWI_ID) : "r0", "lr" )
  67:./common/swi.h **** 
  68:./common/swi.h **** static inline unsigned long IntGetCPSR(void)
  69:./common/swi.h **** {	
  70:./common/swi.h **** 	unsigned long res; 
  71:./common/swi.h **** 	MY_SWI_CALL_RES(SWI_NUM_GET_CPSR, res);
  72:./common/swi.h **** 	return res;
  73:./common/swi.h **** }
  74:./common/swi.h **** 
  75:./common/swi.h **** static inline unsigned long IntDisable(void)
  76:./common/swi.h **** {
  77:./common/swi.h **** 	unsigned long res; 
  78:./common/swi.h **** 	MY_SWI_CALL_RES(SWI_NUM_IRQ_DIS, res);
  79:./common/swi.h **** 	return res;
  80:./common/swi.h **** }
  81:./common/swi.h **** 
  82:./common/swi.h **** static inline unsigned long IntEnable(void) {
  83:./common/swi.h **** 	unsigned long res; 
  84:./common/swi.h **** 	MY_SWI_CALL_RES(SWI_NUM_IRQ_EN, res);
 120              		.loc 3 84 0
 121 0044 01DF     		swi 1     
 122 0046 031C     		mov r3,r0  
 123              		
 124              	.LVL2:
 125              		.code	16
 126              	.L2:
 127 0048 FEE7     		b	.L2
 128              	.L5:
 129 004a 0000     		.align	2
 130              	.L4:
 131 004c 010400A5 		.word	-1526725631
 132 0050 00FDFFFF 		.word	-768
 133 0054 00FCFFFF 		.word	-1024
 134 0058 00F4FFFF 		.word	-3072
 135 005c 08F0FFFF 		.word	-4088
 136 0060 FCF0FFFF 		.word	-3844
 137 0064 00000000 		.word	_Z31Periodic_Interval_Timer_handlerv
 138 0068 00F0FFFF 		.word	-4096
 139 006c C0270903 		.word	50931648
 140 0070 30FDFFFF 		.word	-720
 141              	.LBE40:
 142              	.LBE39:
 143              	.LBE38:
 144              	.LFE304:
 146              		.global	__gxx_personality_sj0
 147              		.section	.text._Z31Periodic_Interval_Timer_handlerv,"ax",%progbits
 148              		.align	2
 149              		.global	_Z31Periodic_Interval_Timer_handlerv
 150              		.code 16
 151              		.thumb_func
 153              	_Z31Periodic_Interval_Timer_handlerv:
 154              	.LFB297:
 155              		.loc 1 22 0
 156              	.LBB48:
 157              		.loc 1 27 0
 158 0000 074B     		ldr	r3, .L11
 159 0002 9B68     		ldr	r3, [r3, #8]
 160              	.LBE48:
 161              		.loc 1 22 0
 162 0004 81B0     		sub	sp, sp, #4
 163              	.LCFI1:
 164              	.LBB49:
 165              		.loc 1 27 0
 166 0006 0093     		str	r3, [sp]
 167              	.LVL3:
 168              	.LBB50:
 169              	.LBB51:
 170              		.loc 2 586 0
 171 0008 0649     		ldr	r1, .L11+4
 172              	.LBE51:
 173              	.LBE50:
 174              		.loc 1 31 0
 175 000a 8022     		mov	r2, #128
 176              	.LBB52:
 177              	.LBB53:
 178              		.loc 2 586 0
 179 000c CB6B     		ldr	r3, [r1, #60]
 180              	.LBE53:
 181              	.LBE52:
 182              		.loc 1 31 0
 183 000e D202     		lsl	r2, r2, #11
 184              	.LBE49:
 185              		.loc 1 22 0
 186              		@ lr needed for prologue
 187              	.LBB54:
 188              		.loc 1 31 0
 189 0010 1342     		tst	r3, r2
 190 0012 01D0     		beq	.L7
 191              	.LBB55:
 192              	.LBB56:
 193              		.loc 2 620 0
 194 0014 4A63     		str	r2, [r1, #52]
 195 0016 00E0     		b	.L10
 196              	.L7:
 197              	.LBE56:
 198              	.LBE55:
 199              	.LBB57:
 200              	.LBB58:
 201              		.loc 2 609 0
 202 0018 0A63     		str	r2, [r1, #48]
 203              	.L10:
 204              	.LBE58:
 205              	.LBE57:
 206              	.LBE54:
 207              		.loc 1 39 0
 208 001a 01B0     		add	sp, sp, #4
 209              		@ sp needed for prologue
 210 001c 7047     		bx	lr
 211              	.L12:
 212 001e 0000     		.align	2
 213              	.L11:
 214 0020 30FDFFFF 		.word	-720
 215 0024 00F4FFFF 		.word	-3072
 216              	.LFE297:
 218              		.section	.text._ZN10LED2_class3offEv,"ax",%progbits
 219              		.align	2
 220              		.global	_ZN10LED2_class3offEv
 221              		.code 16
 222              		.thumb_func
 224              	_ZN10LED2_class3offEv:
 225              	.LFB303:
 226              		.loc 1 92 0
 227              	.LVL4:
 228              	.LBB61:
 229              	.LBB62:
 230              		.loc 2 609 0
 231 0000 024A     		ldr	r2, .L15
 232 0002 8023     		mov	r3, #128
 233 0004 9B02     		lsl	r3, r3, #10
 234              	.LBE62:
 235              	.LBE61:
 236              		.loc 1 92 0
 237              		@ lr needed for prologue
 238              	.LBB63:
 239              	.LBB64:
 240              		.loc 2 609 0
 241 0006 1363     		str	r3, [r2, #48]
 242              	.LBE64:
 243              	.LBE63:
 244              		.loc 1 95 0
 245              		@ sp needed for prologue
 246 0008 7047     		bx	lr
 247              	.L16:
 248 000a 0000     		.align	2
 249              	.L15:
 250 000c 00F4FFFF 		.word	-3072
 251              	.LFE303:
 253              		.section	.text._ZN10LED2_classC1Ev,"ax",%progbits
 254              		.align	2
 255              		.global	_ZN10LED2_classC1Ev
 256              		.code 16
 257              		.thumb_func
 259              	_ZN10LED2_classC1Ev:
 260              	.LFB301:
 261              		.loc 1 80 0
 262              	.LVL5:
 263              	.LBB70:
 264              	.LBB71:
 265              	.LBB72:
 266              		.loc 2 609 0
 267 0000 034A     		ldr	r2, .L19
 268 0002 8023     		mov	r3, #128
 269 0004 9B02     		lsl	r3, r3, #10
 270 0006 1363     		str	r3, [r2, #48]
 271              	.LBE72:
 272              	.LBE71:
 273              	.LBE70:
 274              		.loc 1 80 0
 275              		@ lr needed for prologue
 276              	.LBB73:
 277              	.LBB74:
 278              	.LBB75:
 279              		.loc 2 508 0
 280 0008 1360     		str	r3, [r2]
 281              	.LBE75:
 282              	.LBE74:
 283              	.LBE73:
 284              		.loc 1 84 0
 285              		@ sp needed for prologue
 286              	.LBB76:
 287              	.LBB77:
 288              	.LBB78:
 289              		.loc 2 509 0
 290 000a 1361     		str	r3, [r2, #16]
 291              	.LBE78:
 292              	.LBE77:
 293              	.LBE76:
 294              		.loc 1 84 0
 295 000c 7047     		bx	lr
 296              	.L20:
 297 000e 0000     		.align	2
 298              	.L19:
 299 0010 00F4FFFF 		.word	-3072
 300              	.LFE301:
 302              		.section	.text._ZN10LED2_classC2Ev,"ax",%progbits
 303              		.align	2
 304              		.global	_ZN10LED2_classC2Ev
 305              		.code 16
 306              		.thumb_func
 308              	_ZN10LED2_classC2Ev:
 309              	.LFB300:
 310              		.loc 1 80 0
 311              	.LVL6:
 312              	.LBB84:
 313              	.LBB85:
 314              	.LBB86:
 315              		.loc 2 609 0
 316 0000 034A     		ldr	r2, .L23
 317 0002 8023     		mov	r3, #128
 318 0004 9B02     		lsl	r3, r3, #10
 319 0006 1363     		str	r3, [r2, #48]
 320              	.LBE86:
 321              	.LBE85:
 322              	.LBE84:
 323              		.loc 1 80 0
 324              		@ lr needed for prologue
 325              	.LBB87:
 326              	.LBB88:
 327              	.LBB89:
 328              		.loc 2 508 0
 329 0008 1360     		str	r3, [r2]
 330              	.LBE89:
 331              	.LBE88:
 332              	.LBE87:
 333              		.loc 1 84 0
 334              		@ sp needed for prologue
 335              	.LBB90:
 336              	.LBB91:
 337              	.LBB92:
 338              		.loc 2 509 0
 339 000a 1361     		str	r3, [r2, #16]
 340              	.LBE92:
 341              	.LBE91:
 342              	.LBE90:
 343              		.loc 1 84 0
 344 000c 7047     		bx	lr
 345              	.L24:
 346 000e 0000     		.align	2
 347              	.L23:
 348 0010 00F4FFFF 		.word	-3072
 349              	.LFE300:
 351              		.section	.text._ZN10LED2_class2onEv,"ax",%progbits
 352              		.align	2
 353              		.global	_ZN10LED2_class2onEv
 354              		.code 16
 355              		.thumb_func
 357              	_ZN10LED2_class2onEv:
 358              	.LFB302:
 359              		.loc 1 86 0
 360              	.LVL7:
 361              	.LBB95:
 362              	.LBB96:
 363              		.loc 2 620 0
 364 0000 024A     		ldr	r2, .L27
 365 0002 8023     		mov	r3, #128
 366 0004 9B02     		lsl	r3, r3, #10
 367              	.LBE96:
 368              	.LBE95:
 369              		.loc 1 86 0
 370              		@ lr needed for prologue
 371              	.LBB97:
 372              	.LBB98:
 373              		.loc 2 620 0
 374 0006 5363     		str	r3, [r2, #52]
 375              	.LBE98:
 376              	.LBE97:
 377              		.loc 1 89 0
 378              		@ sp needed for prologue
 379 0008 7047     		bx	lr
 380              	.L28:
 381 000a 0000     		.align	2
 382              	.L27:
 383 000c 00F4FFFF 		.word	-3072
 384              	.LFE302:
 386              		.section	.text._Z41__static_initialization_and_destruction_0ii,"ax",%progbits
 387              		.align	2
 388              		.code 16
 389              		.thumb_func
 391              	_Z41__static_initialization_and_destruction_0ii:
 392              	.LFB305:
 100:main.cpp      **** {
 101:main.cpp      **** 
 102:main.cpp      ****     device_init();
 103:main.cpp      **** 
 104:main.cpp      ****     IntEnable();  // the swi-call
 105:main.cpp      **** 
 106:main.cpp      ****     while (1)
 107:main.cpp      ****     {
 108:main.cpp      **** 
 109:main.cpp      ****     }
 110:main.cpp      **** 
 111:main.cpp      ****     return 0; /* never reached */
 112:main.cpp      **** }
 393              		.loc 1 112 0
 394              	.LVL8:
 395              		@ lr needed for prologue
 396              		.loc 1 112 0
 397 0000 0128     		cmp	r0, #1
 398 0002 08D1     		bne	.L33
 399 0004 044B     		ldr	r3, .L34
 400 0006 9942     		cmp	r1, r3
 401 0008 05D1     		bne	.L33
 402              	.LBB106:
 403              	.LBB107:
 404              	.LBB108:
 405              	.LBB109:
 406              	.LBB110:
 407              		.loc 2 609 0
 408 000a 044A     		ldr	r2, .L34+4
 409 000c 8023     		mov	r3, #128
 410 000e 9B02     		lsl	r3, r3, #10
 411 0010 1363     		str	r3, [r2, #48]
 412              	.LBE110:
 413              	.LBE109:
 414              	.LBB111:
 415              	.LBB112:
 416              		.loc 2 508 0
 417 0012 1360     		str	r3, [r2]
 418              		.loc 2 509 0
 419 0014 1361     		str	r3, [r2, #16]
 420              	.L33:
 421              	.LBE112:
 422              	.LBE111:
 423              	.LBE108:
 424              	.LBE107:
 425              	.LBE106:
 426              		.loc 1 112 0
 427              		@ sp needed for prologue
 428 0016 7047     		bx	lr
 429              	.L35:
 430              		.align	2
 431              	.L34:
 432 0018 FFFF0000 		.word	65535
 433 001c 00F4FFFF 		.word	-3072
 434              	.LFE305:
 436              		.section	.text._GLOBAL__I__Z31Periodic_Interval_Timer_handlerv,"ax",%progbits
 437              		.align	2
 438              		.code 16
 439              		.thumb_func
 441              	_GLOBAL__I__Z31Periodic_Interval_Timer_handlerv:
 442              	.LFB306:
 113:main.cpp      **** 
 443              		.loc 1 113 0
 444 0000 00B5     		push	{lr}
 445              	.LCFI2:
 446              		.loc 1 113 0
 447 0002 0120     		mov	r0, #1
 448 0004 0249     		ldr	r1, .L38
 449 0006 FFF7FEFF 		bl	_Z41__static_initialization_and_destruction_0ii
 450              		@ sp needed for prologue
 451 000a 01BC     		pop	{r0}
 452 000c 0047     		bx	r0
 453              	.L39:
 454 000e 0000     		.align	2
 455              	.L38:
 456 0010 FFFF0000 		.word	65535
 457              	.LFE306:
 459              		.global	led2
 460              		.section	.bss.led2,"aw",%nobits
 461              		.align	2
 464              	led2:
 465 0000 00000000 		.space	4
 565              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
     /tmp/ccyve3zg.s:1      .text:00000000 $t
     /tmp/ccyve3zg.s:13     .ctors:00000000 $d
     /tmp/ccyve3zg.s:441    .text._GLOBAL__I__Z31Periodic_Interval_Timer_handlerv:00000000 _GLOBAL__I__Z31Periodic_Interval_Timer_handlerv
     /tmp/ccyve3zg.s:20     .text.main:00000000 main
     /tmp/ccyve3zg.s:17     .text.main:00000000 $t
     /tmp/ccyve3zg.s:131    .text.main:0000004c $d
     /tmp/ccyve3zg.s:153    .text._Z31Periodic_Interval_Timer_handlerv:00000000 _Z31Periodic_Interval_Timer_handlerv
     /tmp/ccyve3zg.s:150    .text._Z31Periodic_Interval_Timer_handlerv:00000000 $t
     /tmp/ccyve3zg.s:214    .text._Z31Periodic_Interval_Timer_handlerv:00000020 $d
     /tmp/ccyve3zg.s:224    .text._ZN10LED2_class3offEv:00000000 _ZN10LED2_class3offEv
     /tmp/ccyve3zg.s:221    .text._ZN10LED2_class3offEv:00000000 $t
     /tmp/ccyve3zg.s:250    .text._ZN10LED2_class3offEv:0000000c $d
     /tmp/ccyve3zg.s:259    .text._ZN10LED2_classC1Ev:00000000 _ZN10LED2_classC1Ev
     /tmp/ccyve3zg.s:256    .text._ZN10LED2_classC1Ev:00000000 $t
     /tmp/ccyve3zg.s:299    .text._ZN10LED2_classC1Ev:00000010 $d
     /tmp/ccyve3zg.s:308    .text._ZN10LED2_classC2Ev:00000000 _ZN10LED2_classC2Ev
     /tmp/ccyve3zg.s:305    .text._ZN10LED2_classC2Ev:00000000 $t
     /tmp/ccyve3zg.s:348    .text._ZN10LED2_classC2Ev:00000010 $d
     /tmp/ccyve3zg.s:357    .text._ZN10LED2_class2onEv:00000000 _ZN10LED2_class2onEv
     /tmp/ccyve3zg.s:354    .text._ZN10LED2_class2onEv:00000000 $t
     /tmp/ccyve3zg.s:383    .text._ZN10LED2_class2onEv:0000000c $d
     /tmp/ccyve3zg.s:388    .text._Z41__static_initialization_and_destruction_0ii:00000000 $t
     /tmp/ccyve3zg.s:391    .text._Z41__static_initialization_and_destruction_0ii:00000000 _Z41__static_initialization_and_destruction_0ii
     /tmp/ccyve3zg.s:432    .text._Z41__static_initialization_and_destruction_0ii:00000018 $d
     /tmp/ccyve3zg.s:438    .text._GLOBAL__I__Z31Periodic_Interval_Timer_handlerv:00000000 $t
     /tmp/ccyve3zg.s:456    .text._GLOBAL__I__Z31Periodic_Interval_Timer_handlerv:00000010 $d
     /tmp/ccyve3zg.s:464    .bss.led2:00000000 led2

UNDEFINED SYMBOLS
AT91F_DBGU_Init
__gxx_personality_sj0
