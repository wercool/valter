   1              		.code	16
   2              		.file	"main.c"
  10              	.Ltext0:
  11              		.align	2
  12              		.global	wait
  13              		.code 16
  14              		.thumb_func
  16              	wait:
  17              	.LFB2:
  18              		.file 1 "main.c"
   1:main.c        **** /******************************************************************************/
   2:main.c        **** /*                                                                            */
   3:main.c        **** /*  HELLO.C:  Hello World Example                                             */
   4:main.c        **** /*                                                                            */
   5:main.c        **** /******************************************************************************/
   6:main.c        **** /*  ported and extended for arm-elf-gcc / WinARM by                           */
   7:main.c        **** /*  Martin Thomas, KL, .de <eversmith@heizung-thomas.de>                      */
   8:main.c        **** /*  modifications Copyright Martin Thomas 2005                                */
   9:main.c        **** /*                                                                            */
  10:main.c        **** /*  Based on file that has been a part of the uVision/ARM development         */
  11:main.c        **** /*  tools, Copyright KEIL ELEKTRONIK GmbH 2002-2004                           */
  12:main.c        **** /******************************************************************************/
  13:main.c        **** 
  14:main.c        **** /* see file Abstract.txt for more info on the gcc-port */
  15:main.c        **** 
  16:main.c        **** #include <stdio.h>                          /* I/O Functions */
  17:main.c        **** #include <AT91SAM7S64.h>                    /* AT91SAMT7S64 definitions */
  18:main.c        **** #include "Board.h"
  19:main.c        **** // #include "lib_AT91SAM7S64.h"
  20:main.c        **** #include "serial.h"
  21:main.c        **** 
  22:main.c        **** extern void init_timer  (void);             /* Initialize Timer */
  23:main.c        **** extern volatile unsigned long timeval;      /* Current Time Tick */
  24:main.c        **** 
  25:main.c        **** extern void init_extint (void);             /* Initialize External Interrupt */
  26:main.c        **** 
  27:main.c        **** AT91S_PIO * pPIO = AT91C_BASE_PIOA;         /* Global Pointer to PIO */
  28:main.c        **** 
  29:main.c        **** 
  30:main.c        **** void wait(unsigned long time)
  31:main.c        **** {
  19              		.loc 1 31 0
  20              	.LVL0:
  32:main.c        **** 	unsigned long tick;
  33:main.c        **** 	
  34:main.c        **** 	tick = timeval;
  21              		.loc 1 34 0
  22 0000 034B     		ldr	r3, .L7
  23 0002 1A68     		ldr	r2, [r3]
  24              	.LVL1:
  25              		.loc 1 31 0
  26              		@ lr needed for prologue
  27 0004 191C     		mov	r1, r3
  28              	.L2:
  35:main.c        **** 	
  36:main.c        **** 	/* Wait for specified Time */
  37:main.c        **** 	while ((unsigned long)(timeval - tick) < time);
  29              		.loc 1 37 0
  30 0006 0B68     		ldr	r3, [r1]
  31 0008 9B1A     		sub	r3, r3, r2
  32 000a 8342     		cmp	r3, r0
  33 000c FBD3     		bcc	.L2
  38:main.c        **** }
  34              		.loc 1 38 0
  35              		@ sp needed for prologue
  36 000e 7047     		bx	lr
  37              	.L8:
  38              		.align	2
  39              	.L7:
  40 0010 00000000 		.word	timeval
  41              	.LFE2:
  43              		.section	.rodata.str1.4,"aMS",%progbits,1
  44              		.align	2
  45              	.LC2:
  46 0000 48656C6C 		.ascii	"Hello from the WinARM example!  (1 2 %i %i)\015\012"
  46      6F206672 
  46      6F6D2074 
  46      68652057 
  46      696E4152 
  47 002d 00       		.ascii	"\000"
  48 002e 0000     		.align	2
  49              	.LC4:
  50 0030 48656C6C 		.ascii	"Hello World !\012\000"
  50      6F20576F 
  50      726C6420 
  50      210A00
  51 003f 00       		.align	2
  52              	.LC7:
  53 0040 596F7527 		.ascii	"You've pressed the \"%c\" key\012\000"
  53      76652070 
  53      72657373 
  53      65642074 
  53      68652022 
  54 005d 000000   		.text
  55              		.align	2
  56              		.global	main
  57              		.code 16
  58              		.thumb_func
  60              	main:
  61              	.LFB3:
  39:main.c        **** 
  40:main.c        **** #if 0
  41:main.c        **** static void test(void)
  42:main.c        **** {
  43:main.c        **** 	unsigned short q = 0;
  44:main.c        **** 	volatile unsigned long* p = (unsigned long)(0);
  45:main.c        **** 	do {
  46:main.c        **** 		iprintf("Addr %i %08x\n", q, *p);
  47:main.c        **** 		q++;
  48:main.c        **** 		p++;
  49:main.c        **** 	} while (q<22);
  50:main.c        **** }
  51:main.c        **** #endif
  52:main.c        **** 
  53:main.c        **** 
  54:main.c        **** /*** Main Program ***/
  55:main.c        **** 
  56:main.c        **** int main (void) {
  62              		.loc 1 56 0
  63 0014 10B5     		push	{r4, lr}
  64              	.LCFI0:
  57:main.c        ****   unsigned long n;
  58:main.c        ****   char flag;
  59:main.c        ****    
  60:main.c        **** 	// enable reset-button (mt)
  61:main.c        **** 	// AT91F_RSTSetMode( AT91C_BASE_RSTC , AT91C_RSTC_URSTEN );
  62:main.c        **** 	*AT91C_RSTC_RMR = ( 0xA5000000 | AT91C_RSTC_URSTEN );
  65              		.loc 1 62 0
  66 0016 294A     		ldr	r2, .L31
  67 0018 294B     		ldr	r3, .L31+4
  68 001a 1A60     		str	r2, [r3]
  63:main.c        **** 	
  64:main.c        **** 	*AT91C_PMC_PCER = (1 << AT91C_ID_PIOA) |  /* Enable Clock for PIO    */
  69              		.loc 1 64 0
  70 001c 294A     		ldr	r2, .L31+8
  71 001e F83B     		sub	r3, r3, #248
  72 0020 1A60     		str	r2, [r3]
  65:main.c        **** 		(1 << AT91C_ID_IRQ0) |  /* Enable Clock for IRQ0   */
  66:main.c        **** 		(1 << AT91C_ID_US0);    /* Enable Clock for USART0 */
  67:main.c        **** 	
  68:main.c        **** 	pPIO->PIO_PER  = LED_MASK;                /* Enable PIO for LED1..4  */
  73              		.loc 1 68 0
  74 0022 294B     		ldr	r3, .L31+12
  75 0024 1A68     		ldr	r2, [r3]
  76 0026 0F23     		mov	r3, #15
  77 0028 1360     		str	r3, [r2]
  69:main.c        **** 	pPIO->PIO_OER  = LED_MASK;                /* LED1..4 are Outputs     */
  78              		.loc 1 69 0
  79 002a 1361     		str	r3, [r2, #16]
  70:main.c        **** 	pPIO->PIO_SODR = LED_MASK;                /* Turn off LED's ("1")    */
  80              		.loc 1 70 0
  81 002c 1363     		str	r3, [r2, #48]
  71:main.c        **** 	pPIO->PIO_OWER = LED4;                    /* LED4 ODSR Write Enable  */
  82              		.loc 1 71 0
  83 002e 0823     		mov	r3, #8
  84 0030 A032     		add	r2, r2, #160
  85 0032 1360     		str	r3, [r2]
  72:main.c        **** 	
  73:main.c        **** 	uart0_init();                             /* Initialize Serial Interface */
  86              		.loc 1 73 0
  87 0034 FFF7FEFF 		bl	uart0_init
  74:main.c        **** 	
  75:main.c        **** 	unsigned short q = 4;
  76:main.c        **** 	iprintf("Hello from the WinARM example!  (1 2 %i %i)\r\n", 3, q);
  88              		.loc 1 76 0
  89 0038 0321     		mov	r1, #3
  90 003a 0422     		mov	r2, #4
  91 003c 2348     		ldr	r0, .L31+16
  92 003e FFF7FEFF 		bl	iprintf
  77:main.c        **** 	// *AT91C_PIOA_CODR = LED4; 
  78:main.c        **** 	// test();
  79:main.c        **** 	
  80:main.c        **** 	init_timer ();                            /* Initialize Timer */
  93              		.loc 1 80 0
  94 0042 FFF7FEFF 		bl	init_timer
  81:main.c        **** 	init_extint();                            /* Initialize External Interrupt */
  95              		.loc 1 81 0
  96 0046 FFF7FEFF 		bl	init_extint
  97              	.LVL2:
  98              	.L30:
  82:main.c        **** 	
  83:main.c        **** 	flag = 0;
  84:main.c        **** 	
  85:main.c        **** 	while (1) {                              /* Loop forever */
  86:main.c        **** 	
  87:main.c        **** 		n = pPIO->PIO_PDSR;                   /* Read Pin Data */
  99              		.loc 1 87 0
 100 004a 1F4B     		ldr	r3, .L31+12
 101 004c 1A68     		ldr	r2, [r3]
 102 004e D46B     		ldr	r4, [r2, #60]
  88:main.c        **** 		if ((n & SW1) == 0) {                /* Check if SW1 is pressed */
 103              		.loc 1 88 0
 104 0050 2303     		lsl	r3, r4, #12
 105 0052 14D4     		bmi	.L11
  89:main.c        **** 		pPIO->PIO_CODR = LED1;                /* Turn On LED1 */
 106              		.loc 1 89 0
 107 0054 0123     		mov	r3, #1
 108 0056 5363     		str	r3, [r2, #52]
  90:main.c        **** 		iprintf ("Hello World !\n");          /* Print "Hello World !" */
 109              		.loc 1 90 0
 110 0058 1D48     		ldr	r0, .L31+20
 111 005a FFF7FEFF 		bl	iprintf
 112              	.LBB7:
 113              	.LBB8:
 114              		.loc 1 34 0
 115 005e 1D4B     		ldr	r3, .L31+24
 116 0060 1A68     		ldr	r2, [r3]
 117              	.LVL3:
 118 0062 191C     		mov	r1, r3
 119              	.L13:
 120              		.loc 1 37 0
 121 0064 0B68     		ldr	r3, [r1]
 122 0066 9B1A     		sub	r3, r3, r2
 123 0068 632B     		cmp	r3, #99
 124 006a FBD9     		bls	.L13
 125              	.LBE8:
 126              	.LBE7:
  91:main.c        **** 		wait(100);                            /* Wait 100ms */
  92:main.c        **** 		pPIO->PIO_SODR = LED1;                /* Turn Off LED1 */
 127              		.loc 1 92 0
 128 006c 164B     		ldr	r3, .L31+12
 129 006e 1A68     		ldr	r2, [r3]
 130              	.LVL4:
 131 0070 0123     		mov	r3, #1
 132 0072 1363     		str	r3, [r2, #48]
 133              	.LBB9:
 134              	.LBB10:
 135              		.loc 1 34 0
 136 0074 0A68     		ldr	r2, [r1]
 137              	.LVL5:
 138              	.L15:
 139              		.loc 1 37 0
 140 0076 0B68     		ldr	r3, [r1]
 141 0078 9B1A     		sub	r3, r3, r2
 142 007a 632B     		cmp	r3, #99
 143 007c FBD9     		bls	.L15
 144              	.L11:
 145              	.LBE10:
 146              	.LBE9:
  93:main.c        **** 		wait(100);                            /* Wait 100ms */
  94:main.c        **** 		}
  95:main.c        **** 		if (((n & SW3) == 0) && (n & SW4)) {   /* Check if SW3 is pressed */
 147              		.loc 1 95 0
 148 007e C023     		mov	r3, #192
 149 0080 1B02     		lsl	r3, r3, #8
 150 0082 8021     		mov	r1, #128
 151 0084 2340     		and	r3, r3, r4
 152 0086 C901     		lsl	r1, r1, #7
 153 0088 8B42     		cmp	r3, r1
 154 008a 03D1     		bne	.L16
  96:main.c        **** 			pPIO->PIO_CODR = LED3;              /* Turn On LED3 */
 155              		.loc 1 96 0
 156 008c 0E4B     		ldr	r3, .L31+12
 157 008e 1A68     		ldr	r2, [r3]
 158              	.LVL6:
 159 0090 0423     		mov	r3, #4
 160 0092 5363     		str	r3, [r2, #52]
 161              	.LVL7:
 162              	.L16:
  97:main.c        **** 		}
  98:main.c        **** 		if ((n & SW4) == 0) {                   /* Check if SW4 is pressed */
 163              		.loc 1 98 0
 164 0094 0C42     		tst	r4, r1
 165 0096 03D1     		bne	.L18
  99:main.c        **** 			pPIO->PIO_SODR = LED3;               /* Turn Off LED3 */
 166              		.loc 1 99 0
 167 0098 0B4B     		ldr	r3, .L31+12
 168 009a 1A68     		ldr	r2, [r3]
 169              	.LVL8:
 170 009c 0423     		mov	r3, #4
 171 009e 1363     		str	r3, [r2, #48]
 172              	.LVL9:
 173              	.L18:
 100:main.c        **** 		}
 101:main.c        **** 		
 102:main.c        **** 		if ( uart0_kbhit() ) {
 174              		.loc 1 102 0
 175 00a0 FFF7FEFF 		bl	uart0_kbhit
 176              	.LVL10:
 177 00a4 0028     		cmp	r0, #0
 178 00a6 D0D0     		beq	.L30
 179              	.LBB11:
 103:main.c        **** 			int c = uart0_getc();
 180              		.loc 1 103 0
 181 00a8 FFF7FEFF 		bl	uart0_getc
 182 00ac 011C     		mov	r1, r0
 183              	.LVL11:
 104:main.c        **** 			iprintf ("You've pressed the \"%c\" key\n", (char)(c));
 184              		.loc 1 104 0
 185 00ae 0906     		lsl	r1, r1, #24
 186              	.LVL12:
 187 00b0 090E     		lsr	r1, r1, #24
 188 00b2 0948     		ldr	r0, .L31+28
 189 00b4 FFF7FEFF 		bl	iprintf
 190 00b8 C7E7     		b	.L30
 191              	.L32:
 192 00ba 0000     		.align	2
 193              	.L31:
 194 00bc 010000A5 		.word	-1526726655
 195 00c0 08FDFFFF 		.word	-760
 196 00c4 44000040 		.word	1073741892
 197 00c8 00000000 		.word	pPIO
 198 00cc 00000000 		.word	.LC2
 199 00d0 30000000 		.word	.LC4
 200 00d4 00000000 		.word	timeval
 201 00d8 40000000 		.word	.LC7
 202              	.LBE11:
 203              	.LFE3:
 205              		.global	pPIO
 206              		.data
 207              		.align	2
 210              	pPIO:
 211 0000 00F4FFFF 		.word	-3072
 253              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cc4FBG7Q.s:1      .text:00000000 $t
     /tmp/cc4FBG7Q.s:16     .text:00000000 wait
     /tmp/cc4FBG7Q.s:40     .text:00000010 $d
     /tmp/cc4FBG7Q.s:60     .text:00000014 main
     /tmp/cc4FBG7Q.s:57     .text:00000014 $t
     /tmp/cc4FBG7Q.s:194    .text:000000bc $d
     /tmp/cc4FBG7Q.s:210    .data:00000000 pPIO
     /tmp/cc4FBG7Q.s:211    .data:00000000 $d

UNDEFINED SYMBOLS
timeval
uart0_init
iprintf
init_timer
init_extint
uart0_kbhit
uart0_getc
